package com.library.service.book.service;

import java.util.List;

import org.kie.api.runtime.KieSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.library.service.book.entity.Student;
import com.library.service.book.exception.Constants;
import com.library.service.book.exception.NotFoundException;
import com.library.service.book.exception.StudentAlreadyExistsException;
import com.library.service.book.mapper.StudentMapper;
import com.library.service.book.repository.StudentRepository;
import com.library.service.book.request.StudentRequest;

@Service
public class StudentService {
	@Autowired
	StudentMapper studentMapper;
	@Autowired
	StudentRepository studentRepository;
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
	private KieSession session;

	private static final Logger log = LoggerFactory.getLogger(StudentService.class);

	/**
	 * This method is used to search Students based on StudentId
	 * 
	 * @param id
	 * @return
	 */
	public Student getStudent(Long id) {
		log.info("Get Student By Id");
		return studentRepository.findById(id)
				.orElseThrow(() -> new NotFoundException(Constants.STUDENT_NOT_FOUND + id));
	}

	/**
	 * This method is used to Creates Student and saves into the Map
	 * 
	 * @param studentRequest
	 * @return student instance
	 * @throws StudentAlreadyExistsException
	 */

	public Student createStudent(StudentRequest studentRequest) {
		Student student = studentMapper.mapCreateStudent(studentRequest);
		log.info("Student created");
		session.insert(student);
		session.fireAllRules();
		studentRequest.setPassword(passwordEncoder.encode(studentRequest.getPassword()));
		Student createdStudent = studentRepository.save(student);
		return createdStudent;
	}

	/**
	 * This method is used to search Get all Students
	 * 
	 * @return List
	 */

	public List<Student> getAllStudents() {
		log.info("Get all Students");
		return studentRepository.findAll();
	}

}
