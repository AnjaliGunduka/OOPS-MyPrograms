package com.junodx.api.models.commerce;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;
import com.stripe.model.CustomerCollection;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.google.common.net.HttpHeaders;
import com.junodx.api.connectors.aws.sns.SnsMessageResponse;
import com.junodx.api.connectors.lims.elements.client.payloads.ElementsRerunResponse;
import com.junodx.api.connectors.lims.elements.client.payloads.GetSamplePayload;
import com.junodx.api.connectors.lims.elements.entities.CollectionType;
import com.junodx.api.connectors.lims.elements.entities.ConcentrationValues;
import com.junodx.api.connectors.lims.elements.entities.ElementsClinic;
import com.junodx.api.connectors.lims.elements.entities.ElementsKit;
import com.junodx.api.connectors.lims.elements.entities.ElementsLocation;
import com.junodx.api.connectors.lims.elements.entities.ElementsOrder;
import com.junodx.api.connectors.lims.elements.entities.ElementsPatient;
import com.junodx.api.connectors.lims.elements.entities.ElementsPlate;
import com.junodx.api.connectors.lims.elements.entities.ElementsPractitioner;
import com.junodx.api.connectors.lims.elements.entities.ElementsReport;
import com.junodx.api.connectors.lims.elements.entities.ElementsSample;
import com.junodx.api.connectors.lims.elements.entities.ElementsSampleDataSource;
import com.junodx.api.connectors.lims.elements.entities.ElementsShipment;
import com.junodx.api.connectors.lims.elements.entities.ElementsWell;
import com.junodx.api.connectors.messaging.payloads.EntityPayload;
import com.junodx.api.connectors.messaging.payloads.EventType;
import com.junodx.api.connectors.shippo.payloads.MultipleRatesPayload;
import com.junodx.api.connectors.shippo.payloads.OrderShipmentPayload;
import com.junodx.api.connectors.shippo.payloads.ShippoAddressForm;
import com.junodx.api.connectors.shippo.payloads.ShippoCreateLabelRequest;
import com.junodx.api.connectors.shippo.payloads.ShippoExtraMap;
import com.junodx.api.connectors.shippo.payloads.ShippoShipmentPayload;
import com.junodx.api.connectors.shippo.payloads.ShippoStatusAddressForm;
import com.junodx.api.connectors.shippo.payloads.ShippoStatusData;
import com.junodx.api.connectors.shippo.payloads.ShippoStatusPayload;
import com.junodx.api.connectors.shippo.payloads.ShippoStatusServiceLevel;
import com.junodx.api.connectors.shippo.payloads.ShippoSubStatus;
import com.junodx.api.connectors.shippo.payloads.ShippoTrackingStatus;
import com.junodx.api.connectors.shippo.payloads.UpdateCustomerToAddress;
import com.junodx.api.connectors.shippo.types.ShippoStatus;
import com.junodx.api.connectors.shippo.types.ShippoSubStatusType;
import com.junodx.api.controllers.commerce.actions.OrderKitAssignPayload;
import com.junodx.api.controllers.commerce.actions.OrderUpdateActions;
import com.junodx.api.controllers.commerce.payloads.ActivationPayload;
import com.junodx.api.controllers.commerce.payloads.ActivationResponsePayload;
import com.junodx.api.controllers.commerce.payloads.DiscountCodeValidationPayload;
import com.junodx.api.controllers.commerce.payloads.InventoryUpdatePayload;
import com.junodx.api.controllers.commerce.payloads.LabReceiptPayload;
import com.junodx.api.controllers.commerce.payloads.ProductAvailabilityResponsePayload;
import com.junodx.api.controllers.commerce.payloads.RedrawRequestPayload;
import com.junodx.api.controllers.commerce.payloads.RefundRequestPayload;
import com.junodx.api.controllers.commerce.payloads.RerunRequestPayload;
import com.junodx.api.controllers.commerce.types.RerunType;
import com.junodx.api.controllers.fulfillment.CancelFulfillmentPayload;
import com.junodx.api.controllers.lab.actions.LabOrderUpdateActions;
import com.junodx.api.controllers.lab.actions.TestReportUpdateActions;
import com.junodx.api.controllers.lab.payloads.ProcessLabOrdersPayload;
import com.junodx.api.controllers.lab.payloads.ProcessLabOrdersResponsePayload;
import com.junodx.api.controllers.lab.payloads.TestRunRemovalPayload;
import com.junodx.api.controllers.lab.payloads.TestRunRetestPayload;
import com.junodx.api.controllers.lab.payloads.ProcessLabOrdersResponsePayload.ProcessLabOrderDetails;
import com.junodx.api.controllers.payloads.CheckoutRequestPayload;
import com.junodx.api.controllers.payloads.OrderUpdateRequest;
import com.junodx.api.controllers.payloads.ReportConfigurationPayload;
import com.junodx.api.controllers.payloads.TestReportUpdateRequest;
import com.junodx.api.controllers.payloads.TestRunUpsertRequest;
import com.junodx.api.dto.models.auth.UserBatchDto;
import com.junodx.api.dto.models.auth.UserOrderDto;
import com.junodx.api.dto.models.commerce.MedicalDetailsOrderCreateDto;
import com.junodx.api.dto.models.commerce.OrderBatchDto;
import com.junodx.api.dto.models.commerce.OrderLineItemBatchDto;
import com.junodx.api.dto.models.commerce.PaymentIntentDto;
import com.junodx.api.dto.models.commerce.ProductAvailabilityDto;
import com.junodx.api.dto.models.commerce.ProductTruncatedDto;
import com.junodx.api.dto.models.fulfillment.MultipleShippingLabelsDto;
import com.junodx.api.dto.models.fulfillment.ShipmentLabelDto;
import com.junodx.api.dto.models.laboratory.BatchRunCollectionDto;
import com.junodx.api.dto.models.laboratory.LabOrderBatchDto;
import com.junodx.api.dto.models.laboratory.LaboratoryOrderAggregateDto;
import com.junodx.api.dto.models.laboratory.LaboratoryReviewStatisticsDto;
import com.junodx.api.dto.models.laboratory.TestReportsAwaitingReviewDto;
import com.junodx.api.dto.models.laboratory.TestReportsReviewResultsDto;
import com.junodx.api.dto.models.laboratory.reports.TestReportBatchDto;
import com.junodx.api.dto.models.patient.MedicalDetailsLabOrderDto;
import com.junodx.api.dto.models.patient.PatientDetailsLabOrderDto;
import com.junodx.api.dto.models.providers.ProviderOrderDto;
import com.junodx.api.models.auth.FetalSexResultsPreferences;
import com.junodx.api.models.auth.User;
import com.junodx.api.models.auth.types.GenderTerms;
import com.junodx.api.models.auth.types.UserStatus;
import com.junodx.api.models.auth.types.UserType;
import com.junodx.api.models.commerce.types.DiscountMode;
import com.junodx.api.models.commerce.types.DiscountType;
import com.junodx.api.models.commerce.types.OrderStatusType;
import com.junodx.api.models.commerce.types.OrderType;
import com.junodx.api.models.commerce.types.PaymentMethodType;
import com.junodx.api.models.commerce.types.PaymentProcessingType;
import com.junodx.api.models.commerce.types.ProductConfigurationType;
import com.junodx.api.models.commerce.types.ProductType;
import com.junodx.api.models.commerce.types.ResultsConfigurationTemplate;
import com.junodx.api.models.commerce.types.TaxType;
import com.junodx.api.models.core.Address;
import com.junodx.api.models.core.DMA;
import com.junodx.api.models.core.LengthUnit;
import com.junodx.api.models.core.Meta;
import com.junodx.api.models.core.State;
import com.junodx.api.models.core.WeightUnit;
import com.junodx.api.models.core.ZipCode;
import com.junodx.api.models.core.types.PASS_FAIL;
import com.junodx.api.models.data.UserEvent;
import com.junodx.api.models.data.types.UserEventType;
import com.junodx.api.models.fulfillment.Fulfillment;
import com.junodx.api.models.fulfillment.FulfillmentProvider;
import com.junodx.api.models.fulfillment.ShippingCarrier;
import com.junodx.api.models.fulfillment.ShippingDetails;
import com.junodx.api.models.fulfillment.ShippingMethod;
import com.junodx.api.models.fulfillment.ShippingStatus;
import com.junodx.api.models.fulfillment.ShippingTarget;
import com.junodx.api.models.fulfillment.ShippingTransaction;
import com.junodx.api.models.fulfillment.types.ShippingDeliveryType;
import com.junodx.api.models.fulfillment.types.ShippingStatusType;
import com.junodx.api.models.inventory.InventoryItem;
import com.junodx.api.models.laboratory.BatchRun;
import com.junodx.api.models.laboratory.BatchRunMetaProjection;
import com.junodx.api.models.laboratory.CustomerActionRequest;
import com.junodx.api.models.laboratory.Kit;
import com.junodx.api.models.laboratory.Laboratory;
import com.junodx.api.models.laboratory.LaboratoryOrder;
import com.junodx.api.models.laboratory.LaboratoryOrderPreferences;
import com.junodx.api.models.laboratory.LaboratoryStatus;
import com.junodx.api.models.laboratory.Signout;
import com.junodx.api.models.laboratory.TestDetails;
import com.junodx.api.models.laboratory.TestReport;
import com.junodx.api.models.laboratory.TestRun;
import com.junodx.api.models.laboratory.reports.FSTRawData;
import com.junodx.api.models.laboratory.reports.NIPSBasicRawData;
import com.junodx.api.models.laboratory.reports.Report;
import com.junodx.api.models.laboratory.reports.ReportStrings;
import com.junodx.api.models.laboratory.reports.types.SignedOutType;
import com.junodx.api.models.laboratory.tests.EuploidTest;
import com.junodx.api.models.laboratory.tests.FetalSexTest;
import com.junodx.api.models.laboratory.tests.SCATest;
import com.junodx.api.models.laboratory.tests.T13Test;
import com.junodx.api.models.laboratory.tests.T18Test;
import com.junodx.api.models.laboratory.tests.T21Test;
import com.junodx.api.models.laboratory.tests.TestQC;
import com.junodx.api.models.laboratory.tests.types.GenderResultType;
import com.junodx.api.models.laboratory.tests.types.POSITIVE_NEGATIVE;
import com.junodx.api.models.laboratory.tests.types.QCType;
import com.junodx.api.models.laboratory.tests.types.SCAResultType;
import com.junodx.api.models.laboratory.tests.types.SnpIdentityType;
import com.junodx.api.models.laboratory.types.ConfidenceIndexType;
import com.junodx.api.models.laboratory.types.CustomerActionRequestType;
import com.junodx.api.models.laboratory.types.KitType;
import com.junodx.api.models.laboratory.types.LaboratoryStatusType;
import com.junodx.api.models.laboratory.types.ReportConfiguration;
import com.junodx.api.models.laboratory.types.ReportConfigurationCounts;
import com.junodx.api.models.laboratory.types.ReportType;
import com.junodx.api.models.laboratory.types.RetestActionType;
import com.junodx.api.models.laboratory.types.TestRunType;
import com.junodx.api.models.patient.Consent;
import com.junodx.api.models.patient.Medication;
import com.junodx.api.models.patient.PatientDetails;
import com.junodx.api.models.patient.types.ConsentType;
import com.junodx.api.models.payment.PaymentProcessorProvider;
import com.junodx.api.models.payment.Transaction;
import com.junodx.api.models.payment.types.PaymentInstrumentType;
import com.junodx.api.models.payment.types.TransactionType;
import com.junodx.api.models.providers.DataBuilder;
import com.junodx.api.models.providers.Location;
import com.junodx.api.models.providers.MedicalLicense;
import com.junodx.api.models.providers.Practice;
import com.junodx.api.models.providers.Provider;
import com.junodx.api.models.providers.Specialty;
import com.junodx.api.models.providers.types.ProviderType;
import com.junodx.api.models.providers.types.SpecialtyType;
import com.junodx.api.models.strings.TargetPortal;
import com.junodx.api.services.auth.UserDetailsImpl;
import com.junodx.api.services.lab.TestRunService;
import com.shippo.exception.APIConnectionException;
import com.shippo.exception.APIException;
import com.shippo.exception.AuthenticationException;
import com.shippo.exception.InvalidRequestException;
import com.shippo.exception.ShippoException;
import com.shippo.model.Rate;
import com.stripe.exception.StripeException;
import com.stripe.model.Application;
import com.stripe.model.AutomaticPaymentMethodsPaymentIntent;
import com.stripe.model.Customer;
import com.stripe.model.PaymentIntent;
import com.stripe.model.StripeError;
import com.stripe.model.PaymentIntent.NextAction;
import com.stripe.net.LiveStripeResponseGetter;
import com.stripe.net.StripeRequest;
import com.stripe.net.StripeResponse;
import com.stripe.net.StripeResponseGetter;
import com.stripe.param.PaymentIntentCreateParams;

import software.amazon.awssdk.services.sns.model.PublishRequest;
import software.amazon.awssdk.services.sns.model.PublishResponse;

public class DataBuilderOrder {

	public static User mockUser() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static User mockUserPassword() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		u.setPassword("Password@123");
		u.setId("1L");
		u.setActivated(false);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static User mockUserId() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		u.setId(null);
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static List<com.junodx.api.models.auth.Authority> authoritiesss = new ArrayList<>();

	public static User mockUserAuthority() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setAuthorities(authoritiesss);
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static Checkout mockCheckoutAnother() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomers());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(items);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static PatientDetails mockPatientDetailss() {
		PatientDetails patientDetails = new PatientDetails();
		patientDetails.setUser(mockUserPatient());
		patientDetails.setId("8L");
		patientDetails.setAllowReleaseOfMedicalRecords(false);
//		patientDetails.setMedicalDetails(mockMedicalDetails());
//		patientDetails.setMedications(medications);
//		patientDetails.setProviders(providers);
//		patientDetails.setUser(mockUserPatient());
		return patientDetails;

	}

	public static List<OrderLineItem> lineInventoryItem = new ArrayList<>();

	public static Order mockOrderInventoryItem() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineInventoryItem);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static com.shippo.model.Order mockOrdershippo() {
		com.shippo.model.Order order = new com.shippo.model.Order();
		order.setCurrency("USD");
		order.setFromAddress(DataBuilder.getMockAddress());
		return null;

	}

	public static List<OrderLineItem> lineproduct = new ArrayList<>();

	public static Order mockOrderproduct() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineproduct);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static BatchRunMetaProjection mockBatchRunMetaProjection() {
		BatchRunMetaProjection batchRunMetaProjection = null;
		return batchRunMetaProjection;
	}

	public static UserEvent mockUserEvent() {
		UserEvent userEvent = new UserEvent();
		userEvent.setAttributes("attribute");
		userEvent.setCreatedAt(Calendar.getInstance());
		userEvent.setId(1L);
		userEvent.setIp4Address("ip4Address");
		userEvent.setReferrer("reffere");
		userEvent.setType(UserEventType.LOGGED_IN);
		userEvent.setUserAgent("userAgent");
		userEvent.setUserId("12345");
		return userEvent;

	}

	public static UserEvent mockUserEventsave() {
		UserEvent userEvent = new UserEvent();
		userEvent.setAttributes("attribute");
		userEvent.setCreatedAt(Calendar.getInstance());
		userEvent.setId(1L);
		userEvent.setIp4Address("ip4Address");
		userEvent.setReferrer("reffere");
		userEvent.setType(UserEventType.REGISTERED);
		userEvent.setUserAgent("userAgent");
		userEvent.setUserId("12345");
		return userEvent;

	}

	public static UserEvent mockUserEventAtomic() {
		UserEvent userEvent = new UserEvent();
		userEvent.setAttributes("attribute");
		userEvent.setCreatedAt(Calendar.getInstance());
		userEvent.setId(1L);
		userEvent.setIp4Address("ip4Address");
		userEvent.setReferrer("reffere");
		userEvent.setType(UserEventType.ACTIVATED);
		userEvent.setUserAgent("userAgent");
		userEvent.setUserId("12345");
		return userEvent;

	}

	public static RerunRequestPayload mockRerunRequestPayload() {
		RerunRequestPayload rerunRequestPayload = new RerunRequestPayload();
		rerunRequestPayload.setApproved(true);
		rerunRequestPayload.setCreate(false);
		rerunRequestPayload.setSampleNumber("123455");
		rerunRequestPayload.setTestRunId("1L");
		rerunRequestPayload.setType(RerunType.REDRAW);
		return rerunRequestPayload;

	}

	public static RerunRequestPayload mockRerunRequestPayloadRetest() {
		RerunRequestPayload rerunRequestPayload = new RerunRequestPayload();
		rerunRequestPayload.setApproved(true);
		rerunRequestPayload.setCreate(false);
		rerunRequestPayload.setSampleNumber("123455");
		rerunRequestPayload.setTestRunId("1L");
		rerunRequestPayload.setType(RerunType.RETEST);
		return rerunRequestPayload;

	}

	public static RerunRequestPayload mockRerunRequestPayloadReflex() {
		RerunRequestPayload rerunRequestPayload = new RerunRequestPayload();
		rerunRequestPayload.setApproved(true);
		rerunRequestPayload.setCreate(false);
		rerunRequestPayload.setSampleNumber("123455");
		rerunRequestPayload.setTestRunId("1L");
		rerunRequestPayload.setType(RerunType.REDRAW);
		return rerunRequestPayload;

	}

	public static OrderLineItem mockOrderLineItemsss() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrders());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		// orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		// orderLineItem.setProductName("Juno Early Fetal Sex Test");
		// orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		// orderLineItem.addFulfillment(mockFulfillments());
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<CustomerActionRequest> customerActionRequestss = new ArrayList<>();

	public static Order mockOrderActionRequest() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsActionRequest);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerActionRequestss);
		order.setTransactions(transactions);
		return order;
	}

	public static List<CustomerActionRequest> customerLineItemEmpty = new ArrayList<>();

	public static Order mockOrderLineItemEmpty() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		// order.setLineItems(OrderlineItemsActionRequest);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerLineItemEmpty);
		order.setTransactions(transactions);
		return order;
	}

	public static List<CustomerActionRequest> customerActionRequestApprove = new ArrayList<>();
	public static List<OrderLineItem> OrderlineItemsId = new ArrayList<>();

	public static Order mockOrderlineItemsId() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsId);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerLineItemEmpty);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsIds = new ArrayList<>();

	public static Order mockOrderlineItemsIds() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsIds);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerLineItemEmpty);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsfulfillmentUpdateData = new ArrayList<>();

	public static Order mockOrderlineItemsfulfillmentUpdateData() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsfulfillmentUpdateData);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerLineItemEmpty);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsfulfillmentUpdateDatas = new ArrayList<>();

	public static Order mockOrderlineItemsfulfillmentUpdateDatas() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsfulfillmentUpdateDatas);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerLineItemEmpty);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsActionRequestApprove = new ArrayList<>();

	public static Order mockOrderActionRequestApprove() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsActionRequestApprove);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerActionRequestApprove);
		order.setTransactions(transactions);
		return order;
	}

	public static Order mockOrderActionRequestApprovefalse() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		// order.setLineItems(OrderlineItemsActionRequestApprove);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerActionRequestApprove);
		order.setTransactions(transactions);
		return order;
	}

	public static List<CustomerActionRequest> customerActionRequestApproveProduct = new ArrayList<>();
	public static List<OrderLineItem> OrderlineItemsActionRequestApproveProduct = new ArrayList<>();

	public static Order mockOrderActionLab() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsLab);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerActionRequestApprove);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsTestRuns = new ArrayList<>();

	public static Order mockOrderActionTestRuns() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsTestRuns);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerActionRequestApprove);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsLab = new ArrayList<>();

	public static Order mockOrderActionRequestApproveProduct() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsActionRequestApproveProduct);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerActionRequestApproveProduct);
		order.setTransactions(transactions);
		return order;
	}

	public static List<CustomerActionRequest> customerActionRequestApproves = new ArrayList<>();
	public static List<OrderLineItem> OrderlineItemsActionRequestApproves = new ArrayList<>();

	public static Order mockOrderActionRequestApproves() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsActionRequestApproves);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequesOrdert());
		order.setCustomerActionRequests(customerActionRequestApproves);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsShipping = new ArrayList<>();

	public static Order mockOrderShipping() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsShipping);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<Fulfillment> fulfillmentShippingsss = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemshippingsss() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setFulfillments(fulfillmentShippingsss);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrders());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippings = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemshipping() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setFulfillments(fulfillmentShippings);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrders());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<OrderLineItem> OrderlineItemsActionRequest = new ArrayList<>();

	public static Order mockOrder() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderStatus> orderStatusHistoryupdateOrderStatus = new ArrayList<>();

	public static Order mockOrderupdateOrderStatus() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistoryupdateOrderStatus);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForPatientElseExample = new ArrayList<>();

	public static Order mockOrderForPatientElseExample() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForPatientElseExample);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static Order mockOrderIds() {
		Order order = new Order();
		order.setId(null);
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsTestReportForOrder = new ArrayList<>();

	public static Order mockOrderTestReportForOrder() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsTestReportForOrder);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsTestReportForOrders = new ArrayList<>();

	public static Order mockOrderTestReportForOrders() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsTestReportForOrders);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForgetLaboratoryOrderDetails = new ArrayList<>();

	public static Order mockOrderForgetLaboratoryOrderDetails() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForgetLaboratoryOrderDetails);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForgettestReport = new ArrayList<>();

	public static Order mockOrderForgettestReport() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForgettestReport);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForgetreportabletestReport = new ArrayList<>();

	public static Order mockOrderForgettestreportableReport() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForgetreportabletestReport);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForgetgetTestRun = new ArrayList<>();

	public static Order mockOrderForgetgetTestRun() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForgetgetTestRun);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForgetgetTestRuns = new ArrayList<>();

	public static Order mockOrderForgetgetTestRuns() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForgetgetTestRuns);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForgetcurrentTestRun = new ArrayList<>();

	public static Order mockOrderForgetcurrentTestRun() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForgetcurrentTestRun);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForgetCompleted = new ArrayList<>();

	public static Order mockOrderForgetCompleted() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForgetCompleted);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsForgetRedraw = new ArrayList<>();

	public static Order mockOrderForgetRedraw() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsForgetRedraw);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippedEmail = new ArrayList<>();

	public static Order mockOrderShippedEmail() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippedEmail);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShipmentOptions = new ArrayList<>();

	public static Order mockOrderShipmentOptions() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShipmentOptions);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineitemLaboratoryOrderDetails = new ArrayList<>();

	public static Order mockOrderitemLaboratoryOrderDetails() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineitemLaboratoryOrderDetails);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineitemFulfillments = new ArrayList<>();

	public static Order mockOrderitemFulfillments() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineitemFulfillments);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineitemFulfillmentss = new ArrayList<>();

	public static Order mockOrderitemFulfillmentss() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineitemFulfillments);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineitemProduct = new ArrayList<>();

	public static Order mockOrderitemProduct() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineitemProduct);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineitem = new ArrayList<>();

	public static Order mockOrderitem() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineitem);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineitemupdateShippingFulfillment = new ArrayList<>();

	public static Order mockOrderitemupdateShippingFulfillment() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineitemupdateShippingFulfillment);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineitemupdateShipping = new ArrayList<>();

	public static Order mockOrderitemupdateShipping() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineitem);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingDetails = new ArrayList<>();

	public static Order mockOrderShippingDetails() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingDetails);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatus = new ArrayList<>();

	public static Order mockOrderShippingStatus() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatus);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingElseStatus = new ArrayList<>();

	public static Order mockOrderShippingElseStatus() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingElseStatus);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatusTwoDay = new ArrayList<>();

	public static Order mockOrderShippingStatusTwoDay() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatusTwoDay);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatusElseTwoDay = new ArrayList<>();

	public static Order mockOrderShippingStatusElseTwoDay() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatusElseTwoDay);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatusElseFirstClass = new ArrayList<>();

	public static Order mockOrderShippingStatusElseFirstClass() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatusElseFirstClass);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatusFirstClass = new ArrayList<>();

	public static Order mockOrderShippingStatusFirstClass() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatusFirstClass);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatusElseOver = new ArrayList<>();

	public static Order mockOrderShippingStatusElseOver() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatusElseOver);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatusOver = new ArrayList<>();

	public static Order mockOrderShippingStatusOver() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatusOver);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatusDefault = new ArrayList<>();

	public static Order mockOrderShippingStatusDefault() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatusDefault);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsShippingStatusElseDefault = new ArrayList<>();

	public static Order mockOrderShippingStatusElseDefault() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsShippingStatusElseDefault);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemssendKitPreparedForShipping = new ArrayList<>();

	public static Order mockOrdersendKitPreparedForShipping() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemssendKitPreparedForShipping);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsactivateKitActivated = new ArrayList<>();

	public static Order mockOrderactivateKitActivated() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsactivateKitActivated);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsactivateKitfulfillmentComplted = new ArrayList<>();

	public static Order mockOrderactivateKitfulfillmentComplted() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsactivateKitfulfillmentComplted);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsactivateKit = new ArrayList<>();

	public static Order mockOrderactivateKit() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsactivateKit);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsupdateWithRefund = new ArrayList<>();
	public static List<Transaction> transactionupdateWithRefund = new ArrayList<>();
	public static List<OrderStatus> orderStatusHistoryupdateWithRefund = new ArrayList<>();

	public static Order mockOrderupdateWithRefund() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistoryupdateWithRefund);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsupdateWithRefund);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactionupdateWithRefund);
		return order;
	}

	public static List<OrderLineItem> lineItemsRerunRequest = new ArrayList<>();

	public static Order mockOrderRerunRequest() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsRerunRequest);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsRerunRequests = new ArrayList<>();

	public static Order mockOrderRerunRequests() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsRerunRequests);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsruns = new ArrayList<>();

	public static Order mockOrderruns() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsruns);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsrunProduct = new ArrayList<>();

	public static Order mockOrderrunProduct() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsrunProduct);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemSampleNumber = new ArrayList<>();

	public static Order mockOrderSampleNumber() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemSampleNumber);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemPsdSample = new ArrayList<>();

	public static Order mockOrderPsdSample() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemPsdSample);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsRetest = new ArrayList<>();

	public static Order mockOrderRetest() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsRetest);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsRetestLabEmpty = new ArrayList<>();

	public static Order mockOrderRetestLabEmpty() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsRetestLabEmpty);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsRetestCustomerEmpty = new ArrayList<>();

	public static Order mockOrderRetestCustomerEmpty() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		// order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsRetestCustomerEmpty);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsCustomer = new ArrayList<>();
	public static List<CustomerActionRequest> customerActionRequestCustomer = new ArrayList<>();

	public static List<OrderLineItem> lineItemsCustomerId = new ArrayList<>();
	public static List<CustomerActionRequest> customerActionRequestCustomerId = new ArrayList<>();

	public static Order mockOrderCustomerEmptyId() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUserPrimaryAdressEmpty());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsCustomerId);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequestCustomerId);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsProduct = new ArrayList<>();
	public static List<CustomerActionRequest> customerActionRequestProduct = new ArrayList<>();

	public static Order mockOrderProduct() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsProduct);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequestProduct);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsProductId = new ArrayList<>();
	public static List<CustomerActionRequest> customerActionRequestProductId = new ArrayList<>();

	public static Order mockOrderProductId() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsProductId);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequestProductId);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsLabs = new ArrayList<>();
	public static List<CustomerActionRequest> customerActionRequestLab = new ArrayList<>();

	public static Order mockOrderLabs() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsLabs);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequestLab);
		order.setTransactions(transactions);
		return order;
	}

	public static User mockUserPrimaryAdressEmpty() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setLimsContactId("78788");
		u.setPrimaryAddress(null);
		u.setId(null);
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static List<CustomerActionRequest> customerActionRequestCustomerIdEmpty = new ArrayList<>();

	public static Order mockOrderCustomerEmpty() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		// order.setCustomer(null);
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsCustomer);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequestCustomerIdEmpty);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsCustomerEmptys = new ArrayList<>();
	public static List<CustomerActionRequest> customerActionRequestCustomerEmptys = new ArrayList<>();

	public static Order mockOrderCustomerEmptys() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		// order.setCustomer(null);
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsCustomerEmptys);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequestCustomerEmptys);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsActionRedraws = new ArrayList<>();

	public static Order mockOrderRedraws() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsActionRedraws);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(true);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsLab = new ArrayList<>();

	public static Order mockOrderLab() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsLab);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsTestRun = new ArrayList<>();

	public static Order mockOrderTestRun() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsTestRun);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsTestRuns = new ArrayList<>();

	public static Order mockOrderTestRuns() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsTestRuns);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsapproveRedraw = new ArrayList<>();
	public static List<CustomerActionRequest> customerActionRequestsapproveRedraw = new ArrayList<>();
	public static List<OrderStatus> orderStatusHistorys = new ArrayList<>();

	public static Order mockOrderapproveRedraw() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistorys);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsapproveRedraw);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequestsapproveRedraw);
		order.setTransactions(transactions);
		return order;
	}

	public static List<Fulfillment> fulfillmentapproveRedraw = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemapproveRedraw() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setFulfillments(fulfillmentapproveRedraw);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderapproveRedraw());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);

		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;
	}

	public static Order mockOrderId() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e888");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsFromLabReceipt = new ArrayList<>();

	public static Order mockOrderFromLabReceipt() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsFromLabReceipt);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsKitPreparedForShipping = new ArrayList<>();

	public static Order mockOrderKitPreparedForShipping() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsKitPreparedForShipping);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsCreateEmail = new ArrayList<>();

	public static Order mockOrderCreateEmail() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsCreateEmail);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static EntityPayload mockEntityPayload() throws StripeException {
		EntityPayload entityPayload = new EntityPayload();
		entityPayload.setEntity(DataBuilder.mockUserUserStatus());
		entityPayload.setEvent(EventType.CREATE);
		entityPayload.setEventTs(Calendar.getInstance());
		entityPayload.setStatus("CREATE");
		return entityPayload;

	}

	public static List<OrderLineItem> OrderlineItemsOrderedAtDesc = new ArrayList<>();

	public static Order mockOrderOrderedAtDesc() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsOrderedAtDesc);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsapprovingProvider = new ArrayList<>();

	public static Order mockOrderapprovingProvider() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsapprovingProvider);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsapprovingProviders = new ArrayList<>();

	public static Order mockOrderapprovingProviders() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsapprovingProviders);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsDefaultPractice = new ArrayList<>();

	public static Order mockOrderDefaultPractice() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsDefaultPractice);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineDefaultProvider = new ArrayList<>();

	public static Order mockOrderDefaultProvider() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineDefaultProvider);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> Orderlins = new ArrayList<>();

	public static Order mockOrderlines() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(Orderlins);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsLabProcessingWithSample = new ArrayList<>();

	public static Order mockOrderLabProcessingWithSample() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsLabProcessingWithSample);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static Order mockOrderTransaction() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		// order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItems = new ArrayList<>();

	public static Order mockOrderKit() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItemsKit);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> OrderlineItemsKit = new ArrayList<>();

	public static Order mockOrderlineitems() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());

		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(OrderlineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static Order mockOrders() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(orderLineItem);
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		// order.setCustomerActionRequests(customerActionRequests);
		// order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemSalesforces = new ArrayList<>();

	public static Order mockOrderSalesforces() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(orderLineItem);
		order.setLineItems(lineItemSalesforces);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("888989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		// order.setCustomerActionRequests(customerActionRequests);
		// order.setTransactions(transactions);
		return order;
	}

	public static List<Fulfillment> fulfillmentSalesforces = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemSalesforces() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setFulfillments(fulfillmentSalesforces);
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderSalesforces());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);

		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;
	}

	public static Order mockOrderss() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(false);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		lineItems.add(mockOrderLineItems());
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		// order.setCustomerActionRequests(customerActionRequests);
		// order.setTransactions(transactions);
		return order;
	}

	public static Discount mockDiscount() {
		Discount discount = new Discount();
		discount.setType(DiscountType.PROMO_CODE);
		discount.setMode(DiscountMode.AMOUNT);
		discount.setDiscountApplied(true);
		discount.setAmountDiscounted(25);
		return discount;
	}

	public static DiscountCode mockDiscountCode() {
		DiscountCode discountCode = new DiscountCode();
		discountCode.setActive(false);
		discountCode.setCode("JO135wwa33jj789");
		discountCode.setDiscount(mockDiscount());
		discountCode.setExpires(Calendar.getInstance());
		discountCode.setId(1L);
		discountCode.setOwnerId("12345");
		discountCode.setOwningClientId("28665");
		discountCode.setValidFrom(Calendar.getInstance());
		return discountCode;

	}

	public static DiscountCode mockDiscountCodevalidateCode() {
		DiscountCode discountCode = new DiscountCode();
		discountCode.setActive(true);
		discountCode.setCode("JO135wwa33jj789");
		discountCode.setDiscount(mockDiscount());
		// discountCode.setExpires(Calendar.getInstance());
		discountCode.setId(1L);
		discountCode.setOwnerId("12345");
		discountCode.setOwningClientId("28665");
		Calendar expiresAt = Calendar.getInstance();
		expiresAt.after(Calendar.getInstance());
		expiresAt.setTimeInMillis(800000000);
		discountCode.setValidFrom(expiresAt);
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.YEAR, 2022);
		cal.add(Calendar.MONTH, 8);
		cal.add(Calendar.DAY_OF_MONTH, 8);
		cal.add(Calendar.HOUR, 8);
		cal.add(Calendar.MINUTE, 8);
		discountCode.setExpires(cal);
		return discountCode;

	}

	public static DiscountCode mockDiscountCodevalidate() {
		DiscountCode discountCode = new DiscountCode();
		discountCode.setActive(true);
		discountCode.setCode("JO135wwa33jj789");
		discountCode.setDiscount(mockDiscountvalidate());
		discountCode.setValidFrom(Calendar.getInstance());
		discountCode.setId(1L);
		discountCode.setOwnerId("12345");
		discountCode.setOwningClientId("28665");
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.YEAR, 2022);
		cal.add(Calendar.MONTH, 8);
		cal.add(Calendar.DAY_OF_MONTH, 8);
		cal.add(Calendar.HOUR, 8);
		cal.add(Calendar.MINUTE, 8);
		discountCode.setExpires(cal);
		return discountCode;
	}

	public static DiscountCode mockDiscountCodevalidateExpries() {
		DiscountCode discountCode = new DiscountCode();
		discountCode.setActive(true);
		discountCode.setCode("JO135wwa33jj789");
		discountCode.setDiscount(mockDiscount());
		discountCode.setExpires(Calendar.getInstance());
		discountCode.setId(1L);
		discountCode.setOwnerId("12345");
		discountCode.setOwningClientId("28665");
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.YEAR, 2022);
		cal.add(Calendar.MONTH, 8);
		cal.add(Calendar.DAY_OF_MONTH, 8);
		cal.add(Calendar.HOUR, 8);
		cal.add(Calendar.MINUTE, 8);
		discountCode.setValidFrom(cal);
		return discountCode;

	}

	public static DiscountCode mockDiscountCodeExpries() {
		DiscountCode discountCode = new DiscountCode();
		discountCode.setActive(true);
		discountCode.setCode("JO135wwa33jj789");
		discountCode.setDiscount(mockDiscount());
		discountCode.setValidFrom(Calendar.getInstance());
		discountCode.setId(1L);
		discountCode.setOwnerId("12345");
		discountCode.setOwningClientId("28665");
		discountCode.setExpires(Calendar.getInstance());
		return discountCode;

	}

	public static DiscountCode mockDiscountCodevalidates() {
		DiscountCode discountCode = new DiscountCode();
		discountCode.setActive(false);
		discountCode.setCode("JO135wwa33jj789");
		discountCode.setDiscount(mockDiscountvalidate());
		discountCode.setExpires(Calendar.getInstance());
		discountCode.setId(1L);
		discountCode.setOwnerId("12345");
		discountCode.setOwningClientId("28665");
		Calendar expiresAt = Calendar.getInstance();
		expiresAt.setTimeInMillis(0);
		expiresAt.after(Calendar.getInstance().getTimeInMillis());
		expiresAt.setTimeInMillis(0);
		discountCode.setValidFrom(expiresAt);
		return discountCode;
	}

	public static Discount mockDiscountvalidate() {
		Discount discount = new Discount();
		discount.setType(DiscountType.PROMO_CODE);
		discount.setMode(DiscountMode.PERCENT);
		discount.setDiscountApplied(true);
		discount.setAmountDiscounted(25);
		return discount;
	}

	public static DiscountCode mockDiscountCodeNull() {
		DiscountCode discountCode = new DiscountCode();
		discountCode.setActive(false);
		discountCode.setCode("JO135wwa33jj789");
		discountCode.setDiscount(mockDiscount());
		discountCode.setExpires(Calendar.getInstance());
		discountCode.setId(1L);
		discountCode.setOwnerId(null);
		discountCode.setOwningClientId(null);
		discountCode.setValidFrom(Calendar.getInstance());
		return discountCode;

	}

	public static DiscountCode mockDiscountCodeUpsert() {
		DiscountCode discountCode = new DiscountCode();
		discountCode.setActive(true);
		discountCode.setCode("JO135wwa33jj789");
		discountCode.setDiscount(mockDiscountUpsert());
		discountCode.setExpires(Calendar.getInstance());
		discountCode.setId(1L);
		discountCode.setOwnerId("12345");
		discountCode.setOwningClientId("28665");
		discountCode.setValidFrom(Calendar.getInstance());
		return discountCode;

	}

	public static Discount mockDiscountUpsert() {
		Discount discount = new Discount();
		discount.setType(DiscountType.CSR_CODE);
		discount.setMode(DiscountMode.PERCENT);
		discount.setDiscountApplied(true);
		discount.setAmountDiscounted(25f);
		return discount;
	}

	public static DiscountCodeValidationPayload mockDiscountCodeValidationPayload() {
		DiscountCodeValidationPayload discountCodeValidationPayload = new DiscountCodeValidationPayload();
		discountCodeValidationPayload.setCode("JO135wwa33jj789");
		discountCodeValidationPayload.setDiscountApplied(25f);
		discountCodeValidationPayload.setDiscountConfiguration(mockDiscountCode());
		discountCodeValidationPayload.setOriginalAmount(25f);
		discountCodeValidationPayload.setRevisedAmount(1f);
		discountCodeValidationPayload.setValid(true);
		return discountCodeValidationPayload;
	}

	public static Tax mockTax() {
		Tax tax = new Tax();
		tax.setAmount(876f);
		tax.setJurisdiction("jurisdiction");
		tax.setRate(876f);
		tax.setType(TaxType.STATE);
		return tax;
	}

	public static OrderStatus mockOrderStatuskitAssaigned() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.KIT_ASSIGNED);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		return orderStatus;
	}

	public static OrderStatus mockOrderStatus() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.CREATED);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		orderStatus.setFulfillment(mockFulfillment());
		return orderStatus;
	}

	public static OrderStatus mockOrderStatusKit() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.KIT_AWAITING_SHIPPING);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		return orderStatus;
	}

	public static OrderStatus mockOrderStatuRedraw() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setForRedraw(true);
		orderStatus.setForReship(true);
		orderStatus.setForRetest(true);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.REDRAW_REQUESTED);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		return orderStatus;
	}

	public static OrderStatus mockOrderStatuRetest() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setForRedraw(false);
		orderStatus.setForReship(false);
		orderStatus.setForRetest(false);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.REDRAW_REQUESTED);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		return orderStatus;
	}

	public static OrderStatus mockOrderStatusRefunded() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.REFUNDED);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		return orderStatus;
	}

	public static OrderStatus mockOrderStatusResults_Viewed() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.RESULTS_VIEWED);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		return orderStatus;
	}

	public static OrderStatus mockOrderStatusClosed() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.CLOSED);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		return orderStatus;
	}

	public static OrderStatus mockOrderStatusCanceled() {
		OrderStatus orderStatus = new OrderStatus();
		orderStatus.setCurrent(false);
		orderStatus.setId(2L);
		orderStatus.setOrder(mockOrder());
		orderStatus.setStatusType(OrderStatusType.CANCELED);
		orderStatus.setUpdatedAt(Calendar.getInstance());
		return orderStatus;
	}

	public static List<OrderStatus> orderStatusHistory = new ArrayList<>();

	public static List<OrderLineItem> lineItems = new ArrayList<>();

	public static PaymentProcessorProvider mockPaymentProcessorProvider() {

		PaymentProcessorProvider paymentProcessorProvider = new PaymentProcessorProvider();
		paymentProcessorProvider.setContactAddress(DataBuilder.getMockAddress());
		paymentProcessorProvider.setContactEmail("no-email@junodx.com");
		paymentProcessorProvider.setContactPhone(DataBuilder.getMockPhone());
		paymentProcessorProvider.setId("1L");
		paymentProcessorProvider.setName("jhon");
		return paymentProcessorProvider;

	}

	public static Transaction mockTransaction() {
		Transaction transaction = new Transaction();
		transaction.setCreatedAt(Calendar.getInstance());
		transaction.setCreatedBy(Calendar.getInstance());
		transaction.setExternalTransactionId("1233ET");
		transaction.setId("1L");
		transaction.setOrder(mockOrder());
		transaction.setPaymentInstrumentType(PaymentInstrumentType.CREDIT_CARD);
		transaction.setProcessor(mockPaymentProcessorProvider());
		transaction.setTransactionId("678Tr");
		transaction.setTransactionJson("transactionJson");
		transaction.setType(TransactionType.CARD_CHARGED);
		return transaction;
	}

	public static List<Transaction> transactions = new ArrayList<>();

	public static CustomerActionRequest mockCustomerActionRequest() {
		CustomerActionRequest customerActionRequest = new CustomerActionRequest();
		customerActionRequest.setActive(true);
		customerActionRequest.setApprovalDate(Calendar.getInstance());
		customerActionRequest.setApproved(true);
		customerActionRequest.setCustomerActionRequestType(CustomerActionRequestType.REDRAW);
		customerActionRequest.setId(1L);
		customerActionRequest.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		customerActionRequest.setMeta(DataBuilder.getMockMeta());
		customerActionRequest.setOrder(mockOrder());
		customerActionRequest.setResolveByDate(Calendar.getInstance());
		customerActionRequest.setResolvedAt(Calendar.getInstance());
		return customerActionRequest;
	}

	public static CustomerActionRequest mockCustomerActionRequesOrderts() {
		CustomerActionRequest customerActionRequest = new CustomerActionRequest();
		customerActionRequest.setActive(true);
		customerActionRequest.setApprovalDate(Calendar.getInstance());
		customerActionRequest.setApproved(false);
		customerActionRequest.setCustomerActionRequestType(CustomerActionRequestType.REDRAW);
		customerActionRequest.setId(1L);
		customerActionRequest.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		customerActionRequest.setMeta(DataBuilder.getMockMeta());
		customerActionRequest.setOrder(mockOrderActionRequest());
		customerActionRequest.setResolveByDate(Calendar.getInstance());
		customerActionRequest.setResolvedAt(Calendar.getInstance());
		return customerActionRequest;
	}

	public static CustomerActionRequest mockCustomerActionRequesOrdert() {
		CustomerActionRequest customerActionRequest = new CustomerActionRequest();
		customerActionRequest.setActive(true);
		customerActionRequest.setApprovalDate(Calendar.getInstance());
		customerActionRequest.setApproved(false);
		customerActionRequest.setCustomerActionRequestType(CustomerActionRequestType.REDRAW);
		customerActionRequest.setId(1L);
		customerActionRequest.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		customerActionRequest.setMeta(DataBuilder.getMockMeta());
		customerActionRequest.setOrder(mockOrderActionRequest());
		customerActionRequest.setResolveByDate(Calendar.getInstance());
		customerActionRequest.setResolvedAt(Calendar.getInstance());
		return customerActionRequest;
	}

	// public static ServiceOptions serviceOptions = new ServiceOptions(true, true);

	public static ServiceOptions mockServiceOptions() {
		ServiceOptions serviceOptions = new ServiceOptions();
		serviceOptions.setAssistedSampleCollection(true);
		serviceOptions.setSelfCollected(true);
		return serviceOptions;
	}

	public static List<CustomerActionRequest> customerActionRequests = new ArrayList<>();

	public static ShippingCarrier mockShippingCarrier() {
		ShippingCarrier shippingCarrier = new ShippingCarrier();
		shippingCarrier.setContactAddress(DataBuilder.getMockAddress());
		shippingCarrier.setContactPhone(DataBuilder.getMockPhone());
		shippingCarrier.setId("1L");
		shippingCarrier.setMeta(DataBuilder.getMockMeta());
		shippingCarrier.setName("jhon");
		return shippingCarrier;
	}

	public static List<ShippingCarrier> carriers = new ArrayList<>();

	public static FulfillmentProvider mockFulfillmentProvider() {
		FulfillmentProvider fulfillmentProvider = new FulfillmentProvider();
		carriers.add(mockShippingCarrier());
		fulfillmentProvider.setCarriers(carriers);
		fulfillmentProvider.setCoveredCountries("United States");
		fulfillmentProvider.setCoveredStates("CA");
		fulfillmentProvider.setDefaultCarrierId("");
		fulfillmentProvider.setDefaultProvider(true);
		fulfillmentProvider.setEmail("no-email@junodx.com");
		fulfillmentProvider.setId("1L");
		fulfillmentProvider.setLabPortalAssigned(true);
		fulfillmentProvider.setMeta(DataBuilder.getMockMeta());
		fulfillmentProvider.setName("jhon");
		fulfillmentProvider.setShipFromAddress(DataBuilder.getMockAddress());
		fulfillmentProvider.setShipFromContactNumber(DataBuilder.getMockPhone());
		fulfillmentProvider.setSubProviderLogoUrl("https://somewhere.ons3.com/finditpath.df3");
		fulfillmentProvider.setSubProviderName("jhon");
		return fulfillmentProvider;
	}

	public static List<Specialty> specialties = new ArrayList<>();

	public static List<MedicalLicense> licenses = new ArrayList<MedicalLicense>();

	public static Provider mockapprovingProvider() {
		Provider approvingProvider = new Provider();
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-email@junodx.com");
		approvingProvider.setFirstName("Ralphie");
		approvingProvider.setLastLoggedIn(Calendar.getInstance());
		approvingProvider.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		approvingProvider.setActivationTs(Calendar.getInstance());
		approvingProvider.setLastName("Jones");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("78788");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("234234324");
		approvingProvider.setPractice(getMockPractice());
		approvingProvider.setPracticing(true);
		approvingProvider.setActivated(true);
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setSalesforceId("878548980");
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.NEW);
		approvingProvider.setUpin("345435435345");
		approvingProvider.setXifinId("87968768");
		return approvingProvider;
	}

	public static Provider mockapprovingProviderSave() {
		Provider approvingProvider = new Provider();
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-email@junodx.com");
		approvingProvider.setFirstName("Ralphie");
		approvingProvider.setLastLoggedIn(Calendar.getInstance());
		approvingProvider.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		approvingProvider.setActivationTs(Calendar.getInstance());
		approvingProvider.setLastName("Jones");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("78788");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("234234324");
		approvingProvider.setPractice(getMockPractice());
		approvingProvider.setPracticing(true);
		approvingProvider.setActivated(true);
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setSalesforceId("878548980");
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.NEW);
		approvingProvider.setUpin("345435435345");
		approvingProvider.setXifinId("87968768");
		return approvingProvider;
	}

	public static Provider mockapprovingProviders() {
		Provider approvingProvider = new Provider();
		approvingProvider.setActivationTs(Calendar.getInstance());
		approvingProvider.setPassword("Password&123");
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-emails@junodx.com");
		approvingProvider.setLastLoggedIn(Calendar.getInstance());
		approvingProvider.setFirstName("Ralphies");
		approvingProvider.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b34");
		approvingProvider.setLastName("Jonees");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("787888");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("2342343244");
		approvingProvider.setPractice(getMockPracticess());
		approvingProvider.setPracticing(false);
		approvingProvider.setDefaultProvider(false);
		approvingProvider.setActivated(false);
		approvingProvider.setSalesforceId("454786");
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.ACTIVATED);
		approvingProvider.setUpin("3454354353454");
		approvingProvider.setXifinId("766980");
		return approvingProvider;
	}

	public static Provider mockapprovingProviderIdEmpty() {
		Provider approvingProvider = new Provider();
		approvingProvider.setActivationTs(Calendar.getInstance());
		approvingProvider.setPassword("Password&123");
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-emails@junodx.com");
		approvingProvider.setLastLoggedIn(Calendar.getInstance());
		approvingProvider.setFirstName("Ralphies");
		approvingProvider.setId(null);
		approvingProvider.setLastName("Jonees");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("787888");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("2342343244");
		approvingProvider.setPractice(getMockPracticess());
		approvingProvider.setPracticing(false);
		approvingProvider.setDefaultProvider(false);
		approvingProvider.setActivated(false);
		approvingProvider.setType(ProviderType.ADMIN);
		approvingProvider.setSalesforceId("454786");
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.ACTIVATED);
		approvingProvider.setUpin("3454354353454");
		approvingProvider.setXifinId("766980");
		return approvingProvider;
	}

	public static Provider mockapprovingProviderIdEmptys() {
		Provider approvingProvider = new Provider();
		approvingProvider.setActivationTs(Calendar.getInstance());
		approvingProvider.setPassword("Password&123");
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-emails@junodx.com");
		approvingProvider.setLastLoggedIn(Calendar.getInstance());
		approvingProvider.setFirstName("Ralphies");
		approvingProvider.setId(null);
		approvingProvider.setLastName("Jonees");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("787888");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("2342343244");
		approvingProvider.setPractice(getMockPracticess());
		approvingProvider.setPracticing(false);
		approvingProvider.setDefaultProvider(false);
		approvingProvider.setActivated(false);
		approvingProvider.setSalesforceId("454786");
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.ACTIVATED);
		approvingProvider.setUpin("3454354353454");
		approvingProvider.setXifinId("766980");
		return approvingProvider;
	}

	public static Practice getMockPracticess() {
		Practice practice = new Practice();
		practice.setActive(true);
		practice.setBillingEmail("billing@junodx.com");
		practice.setContactAddress(getMockAddress());
		practice.setDefaultPractice(true);
		practice.setId("6L");
		practice.setLimsId("78788");
		// List<Location> locations = new ArrayList<Location>();
		// locations.add(getMockLocation());
		// practice.setLocations(locations);
//		practice.setMeta(getMockMeta());
		practice.setName("Juno Diagnostics Medical");
		practice.setPatientEmail("support@junodx.com");
		practice.setPrimaryEmail("support@junodx.com");
		// practice.setPrimaryPhone(getMockPhone());
//		List<Provider> provide = new ArrayList<Provider>();
//		provide.add(getMockProvider());
//		practice.setProviders(provide);
//		practice.setSalesforceId(null);
//		practice.setXifinId(null);
		return practice;
	}

	public static Practice getMockPractice() {
		Practice practice = new Practice();
		practice.setActive(true);
		practice.setBillingEmail("billing@junodx.com");
		practice.setContactAddress(getMockAddress());
		practice.setDefaultPractice(true);
		practice.setId("2L");
		practice.setLimsId("78788");
		// List<Location> locations = new ArrayList<Location>();
		// locations.add(getMockLocation());
		// practice.setLocations(locations);
//		practice.setMeta(getMockMeta());
		practice.setName("Juno Diagnostics Medical");
		practice.setPatientEmail("support@junodx.com");
		practice.setPrimaryEmail("support@junodx.com");
		// practice.setPrimaryPhone(getMockPhone());
//		List<Provider> provide = new ArrayList<Provider>();
//		provide.add(getMockProvider());
//		practice.setProviders(provide);
//		practice.setSalesforceId(null);
//		practice.setXifinId(null);
		return practice;
	}

	public static List<Location> locations = new ArrayList<Location>();

	public static Practice getMockPractices() {
		Practice practice = new Practice();
		practice.setActive(true);
		practice.setBillingEmail("billing@junodx.com");
		practice.setContactAddress(getMockAddress());
		practice.setDefaultPractice(true);
		practice.setId("2L");
		practice.setLimsId("78788");
		practice.setLocations(locations);
		practice.setProviders(providerss);
		practice.setName("Juno Diagnostics Medical");
		practice.setPatientEmail("support@junodx.com");
		practice.setPrimaryEmail("support@junodx.com");
		return practice;
	}

	public static List<Location> locationSave = new ArrayList<Location>();
	public static List<Provider> providerSave = new ArrayList<>();

	public static Practice getMockPracticeSave() {
		Practice practice = new Practice();
		practice.setActive(true);
		practice.setBillingEmail("billing@junodx.com");
		practice.setContactAddress(getMockAddress());
		practice.setDefaultPractice(true);
		practice.setId("2L");
		practice.setLimsId("78788");
		practice.setLocations(locationSave);
		practice.setProviders(providerSave);
		practice.setName("Juno Diagnostics Medical");
		practice.setPatientEmail("support@junodx.com");
		practice.setPrimaryEmail("support@junodx.com");
		return practice;
	}

	public static Provider mockapprovingProviderRelationshipFromList() {
		Provider approvingProvider = new Provider();
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-email@junodx.com");
		approvingProvider.setFirstName("Ralphie");
		approvingProvider.setId(null);
		approvingProvider.setLastName("Jones");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("78788");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("234234324");
		approvingProvider.setPractice(getMockPracticeRelationshipFromList());
		approvingProvider.setPracticing(true);
		// approvingProvider.setSalesforceId(null);
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.NEW);
		approvingProvider.setUpin("345435435345");
		// approvingProvider.setXifinId(null);
		return approvingProvider;
	}

	public static Practice getMockPracticeRelationshipFromList() {
		Practice practice = new Practice();
		practice.setActive(true);
		practice.setBillingEmail("billing@junodx.com");
		practice.setContactAddress(getMockAddress());
		practice.setDefaultPractice(true);
		practice.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		practice.setLimsId("78788");
		// List<Location> locations = new ArrayList<Location>();
		// locations.add(getMockLocation());
		// practice.setLocations(locations);
//		practice.setMeta(getMockMeta());
		practice.setName("Juno Diagnostics Medical");
		practice.setPatientEmail("support@junodx.com");
		practice.setPrimaryEmail("support@junodx.com");
		// practice.setPrimaryPhone(getMockPhone());
//		List<Provider> provide = new ArrayList<Provider>();
//		provide.add(getMockProvider());
//		practice.setProviders(provide);
//		practice.setSalesforceId(null);
//		practice.setXifinId(null);
		return practice;
	}

	public static Kit mockKit() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitLaboratoryOrder() {
		Kit kitss = new Kit();
		kitss.setTestRun(mockTestRunLaboratoryOrder());
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitPatient() {
		Kit kitss = new Kit();
		kitss.setTestRun(mockTestRunPatient());
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunPatient() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrderPatient());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunLaboratoryOrder() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(null);
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static Kit mockKitFulfillments() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setTestRun(mockTestRunFulfillments());
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunFulfillments() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrderFulfillments());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static LaboratoryOrder mockLaboratoryOrderFulfillments() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static Kit mockKitOrder() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setTestRun(mockTestRunOrder());
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunOrder() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrderOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static LaboratoryOrder mockLaboratoryOrderOrder() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItemOrder());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static OrderLineItem mockOrderLineItemOrder() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(null);
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static Kit mockKitTestRun() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setTestRun(mockTestRun());
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitActivatedd() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setTestRun(mockTestRunActivatedd());
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunActivatedd() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrderActivatedd());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static LaboratoryOrder mockLaboratoryOrderActivatedd() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItemActivatedd());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static List<Fulfillment> fulfillmentActivatedd = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActivatedd() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentActivatedd);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static Kit mockKitFulfillmentsCode() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setTestRun(mockTestRunFulfillmentsCode());
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(false);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunFulfillmentsCode() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrderFulfillmentsCode());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static LaboratoryOrder mockLaboratoryOrderFulfillmentsCode() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItemFulfillmentsCode());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static List<Fulfillment> fulfillmentFulfillmentsCode = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemFulfillmentsCode() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentFulfillmentsCode);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static Kit mockKitActivateds() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setTestRun(mockTestRunActivateds());
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(false);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunActivateds() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrderActivateds());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static LaboratoryOrder mockLaboratoryOrderActivateds() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItemactivateKit());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static Kit mockKitAssigned() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitUnusables() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(true);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitSample() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("");
		kitss.setPsdSleeveNumber("9877");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitPsdSleeveNumber() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("12345");
		// kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitEmpty() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(true);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static ProviderApproval mockProviderApprovalLaboratoryOrderDetails() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(false);
		providerApproval.setApprovingProvider(mockapprovingProvider());
		providerApproval.setRequiresApproval(true);
		return providerApproval;
	}

	public static ProviderApproval mockProviderApproval() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(true);
		providerApproval.setApprovingProvider(mockapprovingProvider());
		providerApproval.setRequiresApproval(true);
		return providerApproval;
	}

	public static Specialty mockSpecialty() {
		Specialty specialty = new Specialty();
		specialty.setId(5L);
		specialty.setProvider(mockapprovingProvider());
		specialty.setType(SpecialtyType.GYNECOLOGY);
		return specialty;

	}

//	public static Consent mockPatientConsent = new Consent("6L", mockUser(), "Medical Informed Consent Form",
//			ConsentType.MEDICAL, true, Calendar.getInstance());

	public static Consent mockConsent() {
		Consent patientConsent = new Consent();
		patientConsent.setApproval(true);
		patientConsent.setApprovalDate(Calendar.getInstance());
		patientConsent.setFormName("Medical Informed Consent Form");
		patientConsent.setId("6L");
		// patientConsent.setLaboratoryOrder(mockLaboratoryOrder());
		patientConsent.setPatient(mockUser());
		patientConsent.setType(ConsentType.MEDICAL);
		return patientConsent;
	}

	public static Laboratory mockLaboratory() {
		Laboratory lab = new Laboratory();
		lab.setContact(DataBuilder.getMockPhone());
		lab.setDefaultLaboratory(true);
		lab.setId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		lab.setLocation(DataBuilder.getMockAddress());
		lab.setMeta(DataBuilder.getMockMeta());
		lab.setName("San Diego");
		return lab;
	}

	public static BatchRunCollectionDto mockBatchRunCollectionDto() {
		BatchRunCollectionDto batchRunCollectionDto = new BatchRunCollectionDto();
		batchRunCollectionDto.setEndTime(Calendar.getInstance());
		batchRunCollectionDto.setId("1l");
		batchRunCollectionDto.setLimsPlateId("paltes");
		batchRunCollectionDto.setMeta(DataBuilder.getMockMeta());
		batchRunCollectionDto.setModelId("98");
		batchRunCollectionDto.setPipelineRunId("12345");
		batchRunCollectionDto.setPipelineVersion("versions1.0");
		batchRunCollectionDto.setReportConfigurations(reportConfigurations);
		batchRunCollectionDto.setReviewed(false);
		batchRunCollectionDto.setRunId(1L);
		batchRunCollectionDto.setSequencingRunId("5L");
		batchRunCollectionDto.setTotalSamples(1);
		batchRunCollectionDto.setStartTime(Calendar.getInstance());
		return batchRunCollectionDto;
	}

	public static ReportConfigurationCounts mockReportConfigurationCounts() {
		ReportConfigurationCounts reportConfigurationCount = new ReportConfigurationCounts();
		reportConfigurationCount.setConfig(ReportConfiguration.FST);
		reportConfigurationCount.setCount(1);
		return reportConfigurationCount;
	}

	public static List<ReportConfigurationCounts> reportConfigurations = new ArrayList<>();

	public static List<LaboratoryStatus> status = new ArrayList<>();

	public static List<TestRun> testRuns = new ArrayList<>();

	public static BatchRun mockBatchRun() {
		BatchRun batch = new BatchRun();
		batch.setEndTime(Calendar.getInstance());
		batch.setId("8L");
		batch.setLaboratory(mockLaboratory());
		batch.setLimsPlateId(null);
		batch.setMeta(DataBuilder.getMockMeta());
		batch.setModelId(null);
		reportConfigurations.add(mockReportConfigurationCounts());
		batch.setReportConfigurations(reportConfigurations);
		batch.setReportConfigurationsInRun(null);
		batch.setReviewed(false);
		batch.setReviewedAt(Calendar.getInstance());
		batch.setRunId(1L);
		batch.setPipelineRunId("12345");
		batch.setSequencingRunId("887687");
		batch.setStartTime(Calendar.getInstance());
		// testRuns.add(mockTestRun());
		batch.setTestRuns(testRuns);
		batch.setTotalSamples(1);
		return batch;
	}

	public static BatchRun mockBatchRunLabEmpty() {
		BatchRun batch = new BatchRun();
		batch.setEndTime(Calendar.getInstance());
		batch.setId("8L");
		batch.setLaboratory(null);
		batch.setLimsPlateId(null);
		batch.setMeta(DataBuilder.getMockMeta());
		batch.setModelId(null);
		reportConfigurations.add(mockReportConfigurationCounts());
		batch.setReportConfigurations(reportConfigurations);
		batch.setReportConfigurationsInRun(null);
		batch.setReviewed(false);
		batch.setReviewedAt(Calendar.getInstance());
		batch.setRunId(1L);
		batch.setPipelineRunId("12345");
		batch.setSequencingRunId("887687");
		batch.setStartTime(Calendar.getInstance());
		// testRuns.add(mockTestRun());
		batch.setTestRuns(testRuns);
		batch.setTotalSamples(1);
		return batch;
	}

	public static Signout mockSignoutDetails() {
		Signout signoutDetails = new Signout();
		signoutDetails.setId("6L");
		signoutDetails.setNonReportable(false);
		signoutDetails.setSignatory(mockUser());
		signoutDetails.setSignedOutAt(Calendar.getInstance());
		return signoutDetails;
	}

	public static Report mockReportupdateWithStrings() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawDataupdateWithStrings().NAME);
		resultData.setRawDataClass(mockFSTRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawDataupdateWithStrings().NAME);
		resultData.setRawData(mockNIPSBasicRawDataupdateWithStrings());
		// resultData.setReport(mockTestReport()) ;
		// resultData.setReport();
		resultData.setQc(mockTestQC());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicRawDataupdateWithStrings() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13TestupdateWithStrings());
		nIPSBasicRawData.setT18(mockT18TestupdateWithStrings());
		nIPSBasicRawData.setT21(mockT21TestupdateWithStrings());
		return nIPSBasicRawData;
	}

	public static T21Test mockT21TestupdateWithStrings() {
		T21Test t21Test = new T21Test();
		t21Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t21Test.setBucketStr("bucketstr");
		t21Test.setConfidence(1f);
		t21Test.setConfidenceLower(1f);
		t21Test.setConfidenceUpper(1f);
		t21Test.setId("1L");
		t21Test.setzScore(1f);
		return t21Test;
	}

	public static T13Test mockT13TestupdateWithStrings() {
		T13Test t13Test = new T13Test();
		t13Test.setBucketStr("bucketstr");
		t13Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t13Test.setConfidence(1f);
		t13Test.setConfidenceLower(1f);
		t13Test.setConfidenceUpper(1f);
		t13Test.setId("1L");
		t13Test.setzScore(1f);
		return t13Test;
	}

	public static T18Test mockT18TestupdateWithStrings() {
		T18Test t18Test = new T18Test();
		t18Test.setBucketStr("bucketstr");
		t18Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t18Test.setConfidence(1f);
		t18Test.setConfidenceLower(1f);
		t18Test.setConfidenceUpper(1f);
		t18Test.setId("1L");
		t18Test.setzScore(1f);
		return t18Test;
	}

	public static Report mockReport() {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData("mockNIPSBasicRawData()");
		resultData.setId("6L");
		resultData.setStrings(mockReportStrings());
		resultData.setReportName("NIPS_PLUS");
		// resultData.setReport(mockTestReport());
		// resultData.setReport();
		resultData.setStrings(mockReportStrings());
		resultData.setQc(mockTestQC());
		return resultData;
	}

	public static ReportStrings mockReportStrings() {
		ReportStrings reportStrings = new ReportStrings();
		reportStrings.setCopy(null);
		reportStrings.setLocale(Locale.GERMANY);
		// reportStrings.setReport(mockTestReport());
		reportStrings.setPortal(TargetPortal.PATIENT);
		reportStrings.setTestDetails(mockTestDetails());
		reportStrings.loadAll();
		return reportStrings;

	}

	public static TestDetails mockTestDetails() {
		TestDetails testDetails = new TestDetails();
		testDetails.setExclusionList("exclusions");
		testDetails.setId(2L);
		testDetails.setInclusionList("Inclusion");
		testDetails.setTestDescription("description");
		testDetails.setTestName("San Diego");
		testDetails.setTestShortName("San Diego");
		return testDetails;

	}

	public static Report mockReportsss() {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(null);
		resultData.setData("mockNIPSBasicRawDatass()");
		resultData.setId("6L");
		resultData.setReportName("NIPS_PLUS");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestQCss());
		return resultData;
	}

	public static TestQC mockTestQCss() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;
	}

	public static NIPSBasicRawData mockNIPSBasicRawDatass() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst("mockFetalSexTest()");
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportFstNull() {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData("mockNIPSBasicRawDataFstNull()");
		resultData.setId("6L");
		resultData.setReportName("reports");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestQC());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicRawDataFstNull() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportC13Snr() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestQCC13Snr());
		return resultData;
	}

	public static TestQC mockTestQCC13Snr() {
		TestQC testQC = new TestQC();
		// testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPipelineError(PASS_FAIL.PASS);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReportChr13Sens() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestQCChr13Sens());
		return resultData;
	}

	public static TestQC mockTestQCChr13Sens() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setPipelineError(PASS_FAIL.PASS);
		// testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReportC18Snr() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestQCC18Snr());
		return resultData;
	}

	public static TestQC mockTestQCC18Snr() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		// testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setPipelineError(PASS_FAIL.PASS);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReportRawCounts() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestRawCounts());
		return resultData;
	}

	public static TestQC mockTestRawCounts() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setPipelineError(PASS_FAIL.PASS);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		// testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReportFetalFraction() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);

		resultData.setData(mockNIPSBasicFetalFraction().NAME);
		resultData.setRawDataClass(mockNIPSBasicFetalFraction().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicFetalFraction().NAME);
		resultData.setRawData(mockNIPSBasicFetalFraction());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicFetalFraction() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		// nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportT13() throws JsonProcessingException {
		Report resultData = new Report();
		resultData.setData(mockNIPSBasicT13().NAME);
		resultData.setRawDataClass(mockNIPSBasicT13().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT13().NAME);
		resultData.setRawData(mockNIPSBasicT13());
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT13() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		// nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportT13Call() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT13Call().NAME);
		resultData.setRawDataClass(mockNIPSBasicT13Call().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT13Call().NAME);
		resultData.setRawData(mockNIPSBasicT13Call());
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static Report mockReportT13Scores() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT13Score().NAME);
		resultData.setRawDataClass(mockNIPSBasicT13Score().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT13Score().NAME);
		resultData.setRawData(mockNIPSBasicT13Score());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static Report mockReportT21Call() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT21Call().NAME);
		resultData.setRawDataClass(mockNIPSBasicT21Call().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT21Call().NAME);
		resultData.setRawData(mockNIPSBasicT21Call());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static T21Test mockT21TestCall() {
		T21Test t21Test = new T21Test();
		// t21Test.setCall(false);
		t21Test.setConfidence(1f);
		t21Test.setConfidenceLower(1f);
		t21Test.setConfidenceUpper(1f);
		t21Test.setId("1L");
		t21Test.setzScore(1f);
		return t21Test;
	}

	public static NIPSBasicRawData mockNIPSBasicT21Call() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21TestCall());
		return nIPSBasicRawData;
	}

	public static Report mockReportT21Score() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setData(mockNIPSBasicT21Score().NAME);
		resultData.setRawDataClass(mockNIPSBasicT21Score().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT21Score().NAME);
		resultData.setRawData(mockNIPSBasicT21Score());
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static Report mockReportdata() throws JsonProcessingException {
		Report resultData = new Report();
		resultData.setData(mockNIPSBasicT21Score().NAME);
		resultData.setRawDataClass(mockNIPSBasicT21Score().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT21Score().NAME);
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static Report mockReportdataQc() throws JsonProcessingException {
		Report resultData = new Report();
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockFSTRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReport()) ;
		// resultData.setReport();
		resultData.setQc(null);
		return resultData;
	}

	public static Report mockReportdataPipelineError() throws JsonProcessingException {
		Report resultData = new Report();
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockFSTRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReport()) ;
		// resultData.setReport();
		resultData.setQc(mockTestQCPipelineError());
		return resultData;
	}

	public static TestQC mockTestQCPipelineError() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setPipelineError(PASS_FAIL.FAIL);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static FSTRawData mockFSTRawData() {
		FSTRawData fSTRawData = new FSTRawData();
		fSTRawData.setFetalFraction(1f);
		fSTRawData.setFst(mockFetalSexTest());
		return fSTRawData;

	}

	public static T21Test mockT21TestScore() {
		T21Test t21Test = new T21Test();
		t21Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t21Test.setConfidence(1f);
		t21Test.setConfidenceLower(1f);
		t21Test.setConfidenceUpper(1f);
		t21Test.setId("1L");
		// t21Test.setzScore(1f);
		return t21Test;
	}

	public static NIPSBasicRawData mockNIPSBasicT21Score() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21TestScore());
		return nIPSBasicRawData;
	}

	public static Report mockReportT21ConfidenceLower() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);

		resultData.setData(mockNIPSBasicT21ConfidenceLower().NAME);
		resultData.setRawDataClass(mockNIPSBasicT21ConfidenceLower().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT21ConfidenceLower().NAME);
		resultData.setRawData(mockNIPSBasicT21ConfidenceLower());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static T21Test mockT21TestConfidenceLower() {
		T21Test t21Test = new T21Test();
		t21Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		// t21Test.setConfidence(1f);
		// t21Test.setConfidenceLower(1f);
		// t21Test.setConfidenceUpper(1f);
		t21Test.setId("1L");
		t21Test.setzScore(1f);
		return t21Test;
	}

	public static NIPSBasicRawData mockNIPSBasicT21ConfidenceLower() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21TestConfidenceLower());
		return nIPSBasicRawData;
	}

	public static NIPSBasicRawData mockNIPSBasicT13Score() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13TestScore());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static T13Test mockT13TestScore() {
		T13Test t13Test = new T13Test();
		t13Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t13Test.setConfidence(1f);
		t13Test.setConfidenceLower(1f);
		t13Test.setConfidenceUpper(1f);
		t13Test.setId("1L");
		t13Test.setzScore(null);
		return t13Test;
	}

	public static Report mockReportT13ConfidenceLower() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT13ConfidenceLower().NAME);
		resultData.setRawDataClass(mockNIPSBasicT13ConfidenceLower().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT13ConfidenceLower().NAME);
		resultData.setRawData(mockNIPSBasicT13ConfidenceLower());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT13ConfidenceLower() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13TestConfidenceLower());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportT18() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT18().NAME);
		resultData.setRawDataClass(mockNIPSBasicT18().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT18().NAME);
		resultData.setRawData(mockNIPSBasicT18());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT18() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		// nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportT21() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT21().NAME);
		resultData.setRawDataClass(mockNIPSBasicT21().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT21().NAME);
		resultData.setRawData(mockNIPSBasicT21());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT21() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(null);
		return nIPSBasicRawData;
	}

	public static Report mockReportT18Score() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT18Score().NAME);
		resultData.setRawDataClass(mockNIPSBasicT18Score().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT18Score().NAME);
		resultData.setRawData(mockNIPSBasicT18Score());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT18Score() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18TestScore());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static T18Test mockT18TestScore() {
		T18Test t18Test = new T18Test();
		t18Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t18Test.setConfidence(1f);
		t18Test.setConfidenceLower(1f);
		t18Test.setConfidenceUpper(1f);
		t18Test.setId("1L");
		// t18Test.setzScore(1f);
		return t18Test;
	}

	public static Report mockReportEuploid() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicEuploid().NAME);
		resultData.setRawDataClass(mockNIPSBasicEuploid().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicEuploid().NAME);
		resultData.setRawData(mockNIPSBasicEuploid());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static Report mockReportFstEuploid() {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData("mockNIPSBasicEuploidFst()");
		resultData.setId("6L");
		resultData.setReportName("reports");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicEuploidFst() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportT13Fst() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT13Fst() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		// nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportT18Fst() {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData("mockNIPSBasicT18Fst()");
		resultData.setId("6L");
		resultData.setReportName("reports");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT18Fst() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		// nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		// nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportT21Fst() {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData("mockNIPSBasicT21Fst()");
		resultData.setId("6L");
		resultData.setReportName("reports");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT21Fst() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		// nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		// nIPSBasicRawData.setT13(mockT13Test());
		// nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportScaFst() {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData("mockNIPSBasicScaFst()");
		resultData.setId("6L");
		resultData.setReportName("reports");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicScaFst() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		// nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		// nIPSBasicRawData.setT13(mockT13Test());
		// nIPSBasicRawData.setT18(mockT18Test());
		// nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static NIPSBasicRawData mockNIPSBasicEuploid() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		// nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportSca() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicSca().NAME);
		resultData.setRawDataClass(mockNIPSBasicSca().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicSca().NAME);
		resultData.setRawData(mockNIPSBasicSca());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicSca() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(null);
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static SCATest mockSCATestyVec() {
		SCATest sCATest = new SCATest();
		sCATest.setGenderConfidence(1f);
		sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		sCATest.setScaConfidence(1f);
		sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		sCATest.setxVec(1f);
		sCATest.setXzScores(1f);
		// sCATest.setyVec(1f);
		sCATest.setyVec2(1f);
		return sCATest;

	}

	public static Report mockReportScayVec() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);

		resultData.setData(mockNIPSBasicScayVec().NAME);
		resultData.setRawDataClass(mockNIPSBasicScayVec().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicScayVec().NAME);
		resultData.setRawData(mockNIPSBasicScayVec());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicScayVec() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATestyVec());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static SCATest mockSCATestyVec2() {
		SCATest sCATest = new SCATest();
		sCATest.setGenderConfidence(1f);
		sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		sCATest.setScaConfidence(1f);
		sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		sCATest.setxVec(1f);
		sCATest.setXzScores(1f);
		sCATest.setyVec(1f);
		// sCATest.setyVec2(1f);
		return sCATest;

	}

	public static Report mockReportScayVec2() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicScayVec2().NAME);
		resultData.setRawDataClass(mockNIPSBasicScayVec2().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicScayVec2().NAME);
		resultData.setRawData(mockNIPSBasicScayVec2());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicScaXzScores() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATestXzScores());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static SCATest mockSCATestXzScores() {
		SCATest sCATest = new SCATest();
		sCATest.setGenderConfidence(1f);
		sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		sCATest.setScaConfidence(1f);
		sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		sCATest.setxVec(1f);
		// sCATest.setXzScores(1f);
		sCATest.setyVec(1f);
		sCATest.setyVec2(1f);
		return sCATest;

	}

	public static Report mockReportScaXzScores() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicScaXzScores().NAME);
		resultData.setRawDataClass(mockNIPSBasicScaXzScores().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicScaXzScores().NAME);
		resultData.setRawData(mockNIPSBasicScaXzScores());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static Report mockReportData() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);

		resultData.setData(mockNIPSBasicScaXzScores().NAME);
		resultData.setRawDataClass(mockNIPSBasicScaXzScores().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicScaXzScores().NAME);
		resultData.setRawData(mockNIPSBasicScaXzScores());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static Report mockReportDataSca() {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData("mockNIPSBasicRawData()");
		resultData.setId("6L");
		resultData.setReportName("reports");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicScayVec2() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATestyVec2());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static SCATest mockSCATestxVec() {
		SCATest sCATest = new SCATest();
		sCATest.setGenderConfidence(1f);
		sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		sCATest.setScaConfidence(1f);
		sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		// sCATest.setxVec(1f);
		sCATest.setXzScores(1f);
		sCATest.setyVec(1f);
		sCATest.setyVec2(1f);
		return sCATest;

	}

	public static Report mockReportScaxVec() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicScaxVec().NAME);
		resultData.setRawDataClass(mockNIPSBasicScaxVec().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicScaxVec().NAME);
		resultData.setRawData(mockNIPSBasicScaxVec());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicScaxVec() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATestxVec());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static SCATest mockSCATestGenderResult() {
		SCATest sCATest = new SCATest();
		sCATest.setGenderConfidence(1f);
		// sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		sCATest.setScaConfidence(1f);
		sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		sCATest.setxVec(1f);
		sCATest.setXzScores(1f);
		sCATest.setyVec(1f);
		sCATest.setyVec2(1f);
		return sCATest;

	}

	public static Report mockReportScaGenderResult() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicScaGenderResult().NAME);
		resultData.setRawDataClass(mockNIPSBasicScaGenderResult().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicScaGenderResult().NAME);
		resultData.setRawData(mockNIPSBasicScaGenderResult());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicScaGenderResult() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATestGenderResult());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static SCATest mockSCATestScaResult() {
		SCATest sCATest = new SCATest();
		sCATest.setGenderConfidence(1f);
		sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		sCATest.setScaConfidence(1f);
		// sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		sCATest.setxVec(1f);
		sCATest.setXzScores(1f);
		sCATest.setyVec(1f);
		sCATest.setyVec2(1f);
		return sCATest;

	}

	public static Report mockReportScaResult() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);

		resultData.setData(mockNIPSBasicScaResult().NAME);
		resultData.setRawDataClass(mockNIPSBasicScaResult().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicScaResult().NAME);
		resultData.setRawData(mockNIPSBasicScaResult());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicScaResult() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATestScaResult());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static SCATest mockSCATestGenderConfidence() {
		SCATest sCATest = new SCATest();
		// sCATest.setGenderConfidence(1f);
		sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		sCATest.setScaConfidence(1f);
		sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		sCATest.setxVec(1f);
		sCATest.setXzScores(1f);
		sCATest.setyVec(1f);
		sCATest.setyVec2(1f);
		return sCATest;

	}

	public static Report mockReportScaGenderConfidence() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicGenderConfidence().NAME);
		resultData.setRawDataClass(mockNIPSBasicGenderConfidence().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicGenderConfidence().NAME);
		resultData.setRawData(mockNIPSBasicGenderConfidence());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicGenderConfidence() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATestGenderConfidence());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static SCATest mockSCATestConfidence() {
		SCATest sCATest = new SCATest();
		sCATest.setGenderConfidence(1f);
		sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		// sCATest.setScaConfidence(1f);
		sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		sCATest.setxVec(1f);
		sCATest.setXzScores(1f);
		sCATest.setyVec(1f);
		sCATest.setyVec2(1f);
		return sCATest;

	}

	public static Report mockReportScaConfidence() throws JsonProcessingException {
		Report resultData = new Report();
//		resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicConfidence().NAME);
		resultData.setRawDataClass(mockNIPSBasicConfidence().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicConfidence().NAME);
		resultData.setRawData(mockNIPSBasicConfidence());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicConfidence() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATestConfidence());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportT18ConfidenceLower() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT18ConfidenceLower().NAME);
		resultData.setRawDataClass(mockNIPSBasicT18ConfidenceLower().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT18ConfidenceLower().NAME);
		resultData.setRawData(mockNIPSBasicT18ConfidenceLower());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT18ConfidenceLower() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18TestConfidenceLower());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static T18Test mockT18TestConfidenceLower() {
		T18Test t18Test = new T18Test();
		t18Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		// t18Test.setConfidence(1f);
		// t18Test.setConfidenceLower(1f);
		// t18Test.setConfidenceUpper(1f);
		t18Test.setId("1L");
		t18Test.setzScore(1f);
		return t18Test;
	}

	public static T13Test mockT13TestConfidenceLower() {
		T13Test t13Test = new T13Test();
		t13Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t13Test.setConfidence(null);
		t13Test.setConfidenceLower(null);
		t13Test.setConfidenceUpper(null);
		t13Test.setId("1L");
		t13Test.setzScore(1f);
		return t13Test;
	}

	public static Report mockReportT18Call() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicT18Call().NAME);
		resultData.setRawDataClass(mockNIPSBasicT18Call().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicT18Call().NAME);
		resultData.setRawData(mockNIPSBasicT18Call());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestFetalFraction());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicT18Call() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18TestCall());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static T18Test mockT18TestCall() {
		T18Test t18Test = new T18Test();
		// t18Test.setCall(false);
		t18Test.setConfidence(1f);
		t18Test.setConfidenceLower(1f);
		t18Test.setConfidenceUpper(1f);
		t18Test.setId("1L");
		t18Test.setzScore(1f);
		return t18Test;
	}

	public static NIPSBasicRawData mockNIPSBasicT13Call() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13TestCall());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static T13Test mockT13TestCall() {
		T13Test t13Test = new T13Test();
		// t13Test.setCall(false);
		t13Test.setConfidence(1f);
		t13Test.setConfidenceLower(1f);
		t13Test.setConfidenceUpper(1f);
		t13Test.setId("1L");
		t13Test.setzScore(1f);
		return t13Test;
	}

	public static TestQC mockTestFetalFraction() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setPipelineError(PASS_FAIL.PASS);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReportSnpIdentity() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestSnpIdentity());
		return resultData;
	}

	public static TestQC mockTestSnpIdentity() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setPipelineError(PASS_FAIL.PASS);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		// testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static TestQC mockTestLowReads() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(null);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setPipelineError(PASS_FAIL.PASS);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReportLowReads() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestLowReads());
		return resultData;
	}

	public static TestQC mockTestChr18Sens() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setPipelineError(PASS_FAIL.PASS);
		// testQC.setChr18Sens(1.0f);Chr18Sens
		// testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReportChr21Sens() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestChr21Sens());
		return resultData;
	}

	public static TestQC mockTestChr21Sens() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		// testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setPipelineError(PASS_FAIL.PASS);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReportChr18Sens() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestChr18Sens());
		return resultData;
	}

	public static Report mockReportC21Snr() throws JsonProcessingException {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData(mockNIPSBasicRawData().NAME);
		resultData.setRawDataClass(mockNIPSBasicRawData().getClass());
		resultData.setId("6L");
		resultData.setReportName(mockNIPSBasicRawData().NAME);
		resultData.setRawData(mockNIPSBasicRawData());
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestC21Snr());
		return resultData;
	}

	public static TestQC mockTestC21Snr() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		// testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setPipelineError(PASS_FAIL.PASS);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static NIPSBasicRawData mockNIPSBasicRawDataC13Snr() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static Report mockReportss() {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		// resultData.setData(mockNIPSBasicRawData());
		resultData.setId("6L");
		resultData.setReportName("reports");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestQC());
		return resultData;
	}

	public static TestQC mockTestQC() {
		TestQC testQC = new TestQC();
		testQC.setC13Snr(true);
		testQC.setChr13Sens(1.0f);
		testQC.setC18Snr(true);
		testQC.setC21Snr(true);
		testQC.setChr18Sens(1.0f);
		testQC.setChr18Sens(1.0f);
		testQC.setChr21Sens(1.0f);
		testQC.setFragmentDistribution(true);
		testQC.setFragmentDistributionPlotUrl("");
		testQC.setLowReads(true);
		testQC.setPassed(true);
		testQC.setRawCounts(15976784);
		testQC.setSnpIdentity(SnpIdentityType.PASS);
		testQC.setType(QCType.SEQUENCING);
		return testQC;

	}

	public static Report mockReports() {
		Report resultData = new Report();
		// resultData.setConfidenceIndex(ConfidenceIndexType.MEDIUM);
		resultData.setData("mockNIPSBasicRawDatas()");
		resultData.setId("6L");
		resultData.setReportName("reports");
		// resultData.setReport(mockTestReports());
		// resultData.setReport();
		resultData.setQc(mockTestQC());
		return resultData;
	}

	public static NIPSBasicRawData mockNIPSBasicRawDatas() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		// nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		// nIPSBasicRawData.setSca(mockSCATest());
		// nIPSBasicRawData.setT13(mockT13Test());
		// nIPSBasicRawData.setT18(mockT18Test());
		// nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static NIPSBasicRawData mockNIPSBasicRawData() {
		NIPSBasicRawData nIPSBasicRawData = new NIPSBasicRawData();
		nIPSBasicRawData.setEuploid(mockEuploidTest());
		nIPSBasicRawData.setFetalFraction(1f);
		// nIPSBasicRawData.setFst(mockFetalSexTest());
		nIPSBasicRawData.setSca(mockSCATest());
		nIPSBasicRawData.setT13(mockT13Test());
		nIPSBasicRawData.setT18(mockT18Test());
		nIPSBasicRawData.setT21(mockT21Test());
		return nIPSBasicRawData;
	}

	public static FetalSexTest mockFetalSexTest() {
		FetalSexTest fetalSexTest = new FetalSexTest();
		fetalSexTest.setGenderConfidence(1f);
		fetalSexTest.setGenderResult(GenderResultType.FEMALE);
		fetalSexTest.setId("1L");
		fetalSexTest.setScaConfidence(1f);
		fetalSexTest.setScaResult("Result");
		fetalSexTest.setScaResultType(SCAResultType.ICCL);
		fetalSexTest.setxVec(1f);
		fetalSexTest.setXzScores(1f);
		fetalSexTest.setyVec(1f);
		fetalSexTest.setyVec2(1f);
		return fetalSexTest;

	}

	public static T13Test mockT13Test() {
		T13Test t13Test = new T13Test();
		t13Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t13Test.setConfidence(1f);
		t13Test.setConfidenceLower(1f);
		t13Test.setConfidenceUpper(1f);
		t13Test.setId("1L");
		t13Test.setzScore(1f);
		return t13Test;
	}

	public static T18Test mockT18Test() {
		T18Test t18Test = new T18Test();
		t18Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t18Test.setConfidence(1f);
		t18Test.setConfidenceLower(1f);
		t18Test.setConfidenceUpper(1f);
		t18Test.setId("1L");
		t18Test.setzScore(1f);
		return t18Test;
	}

	public static T21Test mockT21Test() {
		T21Test t21Test = new T21Test();
		t21Test.setCall(POSITIVE_NEGATIVE.POSITIVE);
		t21Test.setConfidence(1f);
		t21Test.setConfidenceLower(1f);
		t21Test.setConfidenceUpper(1f);
		t21Test.setId("1L");
		t21Test.setzScore(1f);
		return t21Test;
	}

	public static SCATest mockSCATest() {
		SCATest sCATest = new SCATest();
		sCATest.setGenderConfidence(1f);
		sCATest.setGenderResult(GenderResultType.MALE);
		sCATest.setId("1L");
		sCATest.setScaConfidence(1f);
		sCATest.setScaResult("Result");
		sCATest.setScaResultType(SCAResultType.XY);
		sCATest.setxVec(1f);
		sCATest.setXzScores(1f);
		sCATest.setyVec(1f);
		sCATest.setyVec2(1f);
		return sCATest;

	}

	public static EuploidTest mockEuploidTest() {
		EuploidTest euploidTest = new EuploidTest();
		euploidTest.setEuploid(true);
		euploidTest.setId("1L");
		return euploidTest;
	}

	public static TestReport mockTestReport() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		// report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportReportActions() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setApproved(true);
		report.setSignedOut(true);
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setViewedByPatient(true);
		report.setRetestRequested(true);
		report.setRetestRequester("request");
		report.setReportable(true);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportupdateWithStrings() throws JsonProcessingException {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReportupdateWithStrings());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		report.setTestRun(mockTestRuns());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportupdate() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		report.setTestRun(mockTestRunsupdate());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportRedraw() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.CONTROL);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		// report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportOrderId() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId(null);
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		// report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReports() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(false);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(false);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.AUTOMATIC);
		report.setResultData(mockReport());
		report.setPipelineRunId("12345");
		report.setTestRun(mockTestRuns());
		report.setSampleNumber("67898");
		report.setDeliveredToProvider(false);
		report.setDeliveredToPatient(false);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(false);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(false);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportsId() {
		TestReport report = new TestReport();
		report.setId(null);
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(false);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(false);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.AUTOMATIC);
		report.setResultData(mockReport());
		report.setPipelineRunId("12345");
		report.setTestRun(mockTestRuns());
		report.setSampleNumber("67898");
		report.setDeliveredToProvider(false);
		report.setDeliveredToPatient(false);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(false);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(false);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportsPdfUrl() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(false);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(false);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.CONTROL);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.AUTOMATIC);
		report.setResultData(mockReport());
		report.setPipelineRunId("12345");
		report.setTestRun(mockTestRuns());
		report.setSampleNumber("67898");
		report.setDeliveredToProvider(false);
		report.setDeliveredToPatient(false);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(false);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(false);
		report.setPatientGAAtCollectionTimestamp(1f);
		report.setPdfStorageBucketName("PdfStorageBucketName");
		report.setPdfStorageKeyName("PdfStorageKeyName");
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportSignedOut() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(false);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(false);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.AUTOMATIC);
		report.setResultData(mockReport());
		report.setPipelineRunId("12345");
		report.setTestRun(mockTestRuns());
		report.setSampleNumber("67898");
		report.setDeliveredToProvider(false);
		report.setDeliveredToPatient(false);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(false);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(false);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportRetest() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(false);
		report.setSignedOut(false);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(false);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.AUTOMATIC);
		report.setResultData(mockReport());
		report.setPipelineRunId("12345");
		report.setTestRun(mockTestRuns());
		report.setSampleNumber("67898");
		report.setDeliveredToProvider(false);
		report.setDeliveredToPatient(false);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(false);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(false);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportApproved() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(false);
		report.setSignedOut(false);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(false);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.AUTOMATIC);
		report.setResultData(mockReport());
		report.setPipelineRunId("12345");
		report.setTestRun(mockTestRuns());
		report.setSampleNumber("67898");
		report.setDeliveredToProvider(false);
		report.setDeliveredToPatient(false);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(false);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(false);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportEmptyPatient() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUserEmpty());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResultData(mockReport());
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		// report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setPipelineRunId("12345");
		report.setSequenceRunId("887687");
		report.setTestRun(mockTestRuns());
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static User mockUserEmpty() {

		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		// u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static TestReport mockTestReportReportable() {
		TestReport report = new TestReport();
		report.setId("34L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResultData(mockReport());
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		// report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setPipelineRunId("12345");
		report.setSequenceRunId("887687");
		report.setTestRun(mockTestRuns());
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(false);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportss() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(false);
		report.setSignedOut(false);
		report.setSignoutDetails(null);
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(false);
		report.setControl(false);
		report.setResultData(mockReport());
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(null);
		report.setSampleNumber("123455");
		report.setPipelineRunId("12345");
		report.setSequenceRunId("887687");
		report.setTestRun(mockTestRunss());
		report.setDeliveredToProvider(false);
		report.setDeliveredToPatient(false);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(false);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportsss() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(false);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(false);
		report.setSignedOut(false);
		report.setSignoutDetails(null);
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(false);
		report.setControl(false);
		report.setSequenceRunId("887687");
		report.setResultData(mockReport());
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.AUTOMATIC);
		report.setSampleNumber("123455");
		report.setTestRun(mockTestRuns());
		report.setDeliveredToProvider(false);
		report.setDeliveredToPatient(false);
		report.setDeliveredToPatientAt(null);
		report.setViewedByPatient(false);
		report.setViewedByPatientAt(null);
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(false);
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestRun mockTestRunss() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(true);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKit());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportsss());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static LaboratoryStatus mockLaboratoryStatus() {
		LaboratoryStatus laboratoryStatus = new LaboratoryStatus();
		laboratoryStatus.setCreatedAt(Calendar.getInstance());
		laboratoryStatus.setCreatedBy("San Diego");
		laboratoryStatus.setCurrent(true);
		laboratoryStatus.setId(8L);
		laboratoryStatus.setStatus(LaboratoryStatusType.KIT_ASSIGNED);
		// laboratoryStatus.setTestRun(mockTestRun());
		return laboratoryStatus;
	}

	public static LaboratoryStatus mockLaboratoryStatusReportStatus() {
		LaboratoryStatus laboratoryStatus = new LaboratoryStatus();
		laboratoryStatus.setCreatedAt(Calendar.getInstance());
		laboratoryStatus.setCreatedBy("San Diego");
		laboratoryStatus.setCurrent(true);
		laboratoryStatus.setId(8L);
		laboratoryStatus.setStatus(LaboratoryStatusType.RECEIVED);
		// laboratoryStatus.setTestRun(mockTestRun());
		return laboratoryStatus;
	}

	public static LaboratoryStatus mockLaboratoryStatuss() {
		LaboratoryStatus laboratoryStatus = new LaboratoryStatus();
		laboratoryStatus.setCreatedAt(Calendar.getInstance());
		laboratoryStatus.setCreatedBy("San Diego");
		laboratoryStatus.setCurrent(false);
		laboratoryStatus.setId(8L);
		laboratoryStatus.setStatus(LaboratoryStatusType.KIT_ASSIGNED);
		// laboratoryStatus.setTestRun(mockTestRun());
		return laboratoryStatus;
	}

	public static Kit mockKits() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(false);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static List<TestRun> testRunRedraw = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderRedraw() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunRedraw);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunredraw = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderRuns() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunredraw);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderItem() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalLaboratoryOrderDetails());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderProviderApproval() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
//		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
//		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
//		laboratoryOrderDetails.setLab(mockLaboratory());
//		laboratoryOrderDetails.setLimsReportId("78788");
//		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
//		laboratoryOrderDetails.setNotes("notes");
//		laboratoryOrderDetails.setPatientConsent(mockConsent());
//		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
//		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
//		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
//		laboratoryOrderDetails.setPatientConsent(mockConsent());
//		laboratoryOrderDetails.setProviderApproval(null);
//		laboratoryOrderDetails.setReportableTestReportId("2L");
//		laboratoryOrderDetails.setReportableTestRunId("1L");
//		laboratoryOrderDetails.setLimsOrderId(null);
//		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
//		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockCancelled() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setCancelled(true);
		laboratoryOrderDetails.setProviderApproval(mockApprovingProviders());
		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockApprovingProvider() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
//		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
//		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
//		laboratoryOrderDetails.setLab(mockLaboratory());
//		laboratoryOrderDetails.setLimsReportId("78788");
//		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
//		laboratoryOrderDetails.setNotes("notes");
//		laboratoryOrderDetails.setPatientConsent(mockConsent());
//		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
//		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
//		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
//		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockApprovingProviders());
//		laboratoryOrderDetails.setReportableTestReportId("2L");
//		laboratoryOrderDetails.setReportableTestRunId("1L");
//		laboratoryOrderDetails.setLimsOrderId(null);
//		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
//		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
//		// testRuns.add(mockTestRun());
//		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static ProviderApproval mockApprovingProviders() {
		ProviderApproval providerApproval = new ProviderApproval();
//		providerApproval.setApprovalDate(Calendar.getInstance());
//		providerApproval.setApproved(true);
//		providerApproval.setApprovingProvider(null);
//		providerApproval.setRequiresApproval(true);
		return providerApproval;
	}

	public static LaboratoryOrder mockLaboratoryOrderupdate() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalupdate());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static ProviderApproval mockProviderApprovalupdate() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(true);
		providerApproval.setApprovingProvider(mockapprovingProviderupdate());
		providerApproval.setRequiresApproval(true);
		return providerApproval;
	}

	public static Provider mockapprovingProviderupdate() {
		Provider approvingProvider = new Provider();
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-email@junodx.com");
		approvingProvider.setFirstName("Ralphie");
		approvingProvider.setLastLoggedIn(Calendar.getInstance());
		approvingProvider.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		approvingProvider.setActivationTs(Calendar.getInstance());
		approvingProvider.setLastName("Jones");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("78788");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("234234324");
		approvingProvider.setPractice(getMockPracticeupdate());
		approvingProvider.setPracticing(true);
		approvingProvider.setActivated(true);
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setSalesforceId("878548980");
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.NEW);
		approvingProvider.setUpin("345435435345");
		approvingProvider.setXifinId("87968768");
		return approvingProvider;
	}

	public static Practice getMockPracticeupdate() {
		Practice practice = new Practice();
		practice.setActive(true);
		practice.setBillingEmail("billing@junodx.com");
		practice.setContactAddress(getMockAddress());
		practice.setDefaultPractice(true);
		practice.setId("8L");
		practice.setLimsId("78788");
		// List<Location> locations = new ArrayList<Location>();
		// locations.add(getMockLocation());
		// practice.setLocations(locations);
//		practice.setMeta(getMockMeta());
		practice.setName("Juno Diagnostics Medical");
		practice.setPatientEmail("support@junodx.com");
		practice.setPrimaryEmail("support@junodx.com");
		// practice.setPrimaryPhone(getMockPhone());
//		List<Provider> provide = new ArrayList<Provider>();
//		provide.add(getMockProvider());
//		practice.setProviders(provide);
//		practice.setSalesforceId(null);
//		practice.setXifinId(null);
		return practice;
	}

	public static LaboratoryOrder mockLaboratoryOrder() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsForPatientElseExample = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderForPatientElseExample() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineitemForPatientElses());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderForPatientElseExample());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrdergetProviderApproval() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static List<ProcessLabOrderDetails> responseDetails = new ArrayList<>();

	public static ProcessLabOrdersResponsePayload mockProcessLabOrdersResponsePayload() {
		ProcessLabOrdersResponsePayload processLabOrdersResponsePayload = new ProcessLabOrdersResponsePayload();
		processLabOrdersResponsePayload.setProviderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		processLabOrdersResponsePayload.setResponseDetails(responseDetails);
		processLabOrdersResponsePayload.setUpdateTimestamp(Calendar.getInstance());
		return processLabOrdersResponsePayload;

	}

	public static LaboratoryOrder mockLaboratoryOrderProviderApprovals() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUserProviderApprovals());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderAction() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setPatient(mockUserProviderApprovals());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalAction());
		return laboratoryOrderDetails;
	}

	public static ProviderApproval mockProviderApprovalAction() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(true);
		providerApproval.setRejected(true);
		providerApproval.setRejectedAt(Calendar.getInstance());
		providerApproval.setRequiresApproval(true);
		providerApproval.setApprovingProvider(mockapprovingProvider());
		return providerApproval;
	}

	public static User mockUserProviderApprovals() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPrimaryAddress(getMockAddressProviderApprovals());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static Address getMockAddressProviderApprovals() {
		Address address = new Address();
		address.setCity("San Diego");
		address.setCountry("United States");
		address.setName("Juno Headquarters");
		address.setPostalCode("98077");
		address.setPrimaryAddress(true);
		address.setState("IN");
		address.setStreet("11511 Sorrento Valley Rd");
		address.setPrimaryMailingAddress(true);
		return address;
	}

	public static LaboratoryOrder mockLaboratoryOrderRelationshipFromLists() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromLists());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderRelationshipFromList() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromList());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsWithRelationshipAggregate = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderWithRelationshipAggregate() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineitemWithAggregate());
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderWithAggregateWithRelationshipAggregate());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromListWithRelationshipAggregate());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsWithRelationshipAggregate);

		return laboratoryOrderDetails;
	}

	public static List<OrderLineItem> lineItemsWithAggregateWithRelationshipAggregate = new ArrayList<>();

	public static Order mockOrderWithAggregateWithRelationshipAggregate() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsWithAggregateWithRelationshipAggregate);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static User mockUserRelationshipFromListWithRelationshipAggregate() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(mockPatientsWithRelationshipAggregate());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static List<Provider> providerPatientsWithRelationshipAggregate = new ArrayList<>();

	public static PatientDetails mockPatientsWithRelationshipAggregate() {
		PatientDetails patientDetails = new PatientDetails();
		// patientDetails.setChart(mockPatientChart());
		patientDetails.setId("8L");
		// patientDetails.setMedicalDetails(mockMedicalDetails());
		patientDetails.setMedications(medications);
		patientDetails.setProviders(providerPatientsWithRelationshipAggregate);
		patientDetails.setUser(mockUser());
		return patientDetails;

	}

	public static LaboratoryOrder mockLaboratoryOrderWithAggregates() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineitemWithAggregate());
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderWithAggregates());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromList());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderForPatient() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineitemForPatient());
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderWithAggregate());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromList());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsOrderForPatients = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderForPatients() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineitemForPatient());
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderWithAggregatePatient());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromList());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsOrderForPatients);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrdervalidateOwnership() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineitemvalidateOwnership());
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderWithAggregate());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromListss());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderAuthoritativeRelationship() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineitemAuthoritativeRelationship());
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderWithAggregate());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromList());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderAggregateView() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineitemAggregateView());
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderWithAggregate());
		laboratoryOrderDetails.setPatient(mockUserRelationshipFromList());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalRelationshipFromList());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static List<Fulfillment> fulfillmentsAggregateView = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemAggregateView() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsAggregateView);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsAuthoritativeRelationship = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemAuthoritativeRelationship() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsAuthoritativeRelationship);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<OrderLineItem> lineItemsWithAggregate = new ArrayList<>();

	public static Order mockOrderWithAggregate() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsWithAggregate);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsWithAggregatePatient = new ArrayList<>();

	public static Order mockOrderWithAggregatePatient() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsWithAggregatePatient);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static List<OrderLineItem> lineItemsWithAggregates = new ArrayList<>();

	public static Order mockOrderWithAggregates() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItemsWithAggregate);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static LaboratoryOrderAggregateDto mockLaboratoryOrderAggregateDto() {
		LaboratoryOrderAggregateDto laboratoryOrderAggregateDto = new LaboratoryOrderAggregateDto();
		laboratoryOrderAggregateDto.setCancelled(false);
		laboratoryOrderAggregateDto.setCurrentLabStatus(LaboratoryStatusType.APPROVED);
		laboratoryOrderAggregateDto.setCurrentLabStatusHistory(status);
		laboratoryOrderAggregateDto.setCurrentShippingStatus(ShippingStatusType.ARRIVED);
		laboratoryOrderAggregateDto.setCurrentShippingStatusHistory(shippingStatuss);
		laboratoryOrderAggregateDto.setCurrentTestRunId("1L");
		laboratoryOrderAggregateDto.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderAggregateDto.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderAggregateDto.setHasFinalReport(false);
		laboratoryOrderAggregateDto.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderAggregateDto.setLab(mockLaboratory());
		laboratoryOrderAggregateDto.setLimsOrderId("12345");
		laboratoryOrderAggregateDto.setLimsReportId("2L");
		laboratoryOrderAggregateDto.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderAggregateDto.setOrderedAt(Calendar.getInstance());
		laboratoryOrderAggregateDto.setTestRuns(testRuns);
		laboratoryOrderAggregateDto.setOrderType(OrderType.SELF_CREATED);
		return laboratoryOrderAggregateDto;

	}

	public static List<TestRun> testRunsForPatientElse = new ArrayList<>();

	public static LaboratoryOrderAggregateDto mockLaboratoryOrderAggregateDtoForPatientElse() {
		LaboratoryOrderAggregateDto laboratoryOrderAggregateDto = new LaboratoryOrderAggregateDto();
		laboratoryOrderAggregateDto.setCancelled(false);
		laboratoryOrderAggregateDto.setCurrentLabStatus(LaboratoryStatusType.APPROVED);
		laboratoryOrderAggregateDto.setCurrentLabStatusHistory(status);
		laboratoryOrderAggregateDto.setCurrentShippingStatus(ShippingStatusType.ARRIVED);
		laboratoryOrderAggregateDto.setCurrentShippingStatusHistory(shippingStatuss);
		laboratoryOrderAggregateDto.setCurrentTestRunId("1L");
		laboratoryOrderAggregateDto.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderAggregateDto.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderAggregateDto.setHasFinalReport(false);
		laboratoryOrderAggregateDto.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderAggregateDto.setLab(mockLaboratory());
		laboratoryOrderAggregateDto.setLimsOrderId("12345");
		laboratoryOrderAggregateDto.setLimsReportId("2L");
		laboratoryOrderAggregateDto.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderAggregateDto.setOrderedAt(Calendar.getInstance());
		laboratoryOrderAggregateDto.setTestRuns(testRunsForPatientElse);
		laboratoryOrderAggregateDto.setOrderType(OrderType.SELF_CREATED);
		return laboratoryOrderAggregateDto;

	}

	public static User mockUserRelationshipFromLists() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(mockPatient());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static List<Provider> providerPatient = new ArrayList<>();

	public static PatientDetails mockPatient() {
		PatientDetails patientDetails = new PatientDetails();
		// patientDetails.setChart(mockPatientChart());
		patientDetails.setId("8L");
		// patientDetails.setMedicalDetails(mockMedicalDetails());
		patientDetails.setMedications(medications);
		patientDetails.setProviders(providerPatient);
		patientDetails.setUser(mockUser());
		return patientDetails;

	}

	public static User mockUserRelationshipFromListss() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(mockPatientss());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static List<Provider> providerPatientss = new ArrayList<>();

	public static PatientDetails mockPatientss() {
		PatientDetails patientDetails = new PatientDetails();
		// patientDetails.setChart(mockPatientChart());
		patientDetails.setId("8L");
		// patientDetails.setMedicalDetails(mockMedicalDetails());
		patientDetails.setMedications(medications);
		patientDetails.setProviders(providerPatientss);
		patientDetails.setUser(mockUser());
		return patientDetails;

	}

	public static User mockUserRelationshipFromList() {
		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(mockPatients());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static List<Provider> providerPatients = new ArrayList<>();

	public static PatientDetails mockPatients() {
		PatientDetails patientDetails = new PatientDetails();
		// patientDetails.setChart(mockPatientChart());
		patientDetails.setId("8L");
		// patientDetails.setMedicalDetails(mockMedicalDetails());
		patientDetails.setMedications(medications);
		patientDetails.setProviders(providerPatients);
		patientDetails.setUser(mockUser());
		return patientDetails;

	}

	public static List<Medication> medications = new ArrayList<>();
	public static List<Provider> providerss = new ArrayList<>();

	public static PatientDetails mockPatientDetails() {
		PatientDetails patientDetails = new PatientDetails();
		// patientDetails.setChart(mockPatientChart());
		patientDetails.setId("8L");
		// patientDetails.setMedicalDetails(mockMedicalDetails());
		patientDetails.setMedications(medications);
		patientDetails.setProviders(providerss);
		patientDetails.setUser(mockUser());
		return patientDetails;

	}

	public static ProviderApproval mockProviderApprovalRelationshipFromList() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(true);
		providerApproval.setApprovingProvider(mockapprovingProviderRelationshipFromList());
		providerApproval.setRequiresApproval(true);
		return providerApproval;
	}

	public static Provider mockapprovingProviderRelationship() {
		Provider approvingProvider = new Provider();
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-email@junodx.com");
		approvingProvider.setFirstName("Ralphie");
		approvingProvider.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b3444");
		approvingProvider.setLastName("Jones");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("78788");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("234234324");
		approvingProvider.setPractice(getMockPracticeRelationshipFromListss());
		approvingProvider.setPracticing(true);
		// approvingProvider.setSalesforceId(null);
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.NEW);
		approvingProvider.setUpin("345435435345");
		// approvingProvider.setXifinId(null);
		return approvingProvider;
	}

	public static Provider mockapprovingProviderRelationshipFromListss() {
		Provider approvingProvider = new Provider();
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-email@junodx.com");
		approvingProvider.setFirstName("Ralphie");
		approvingProvider.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		approvingProvider.setLastName("Jones");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("78788");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("234234324");
		approvingProvider.setPractice(getMockPracticeRelationshipFromListss());
		approvingProvider.setPracticing(true);
		// approvingProvider.setSalesforceId(null);
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.NEW);
		approvingProvider.setUpin("345435435345");
		// approvingProvider.setXifinId(null);
		return approvingProvider;
	}

	public static Practice getMockPracticeRelationshipFromListss() {
		Practice practice = new Practice();
		practice.setActive(true);
		practice.setBillingEmail("billing@junodx.com");
		practice.setContactAddress(getMockAddress());
		practice.setDefaultPractice(true);
		practice.setId("6L");
		practice.setLimsId("78788");
		// List<Location> locations = new ArrayList<Location>();
		// locations.add(getMockLocation());
		// practice.setLocations(locations);
//		practice.setMeta(getMockMeta());
		practice.setName("Juno Diagnostics Medical");
		practice.setPatientEmail("support@junodx.com");
		practice.setPrimaryEmail("support@junodx.com");
		// practice.setPrimaryPhone(getMockPhone());
//		List<Provider> provide = new ArrayList<Provider>();
//		provide.add(getMockProvider());
//		practice.setProviders(provide);
//		practice.setSalesforceId(null);
//		practice.setXifinId(null);
		return practice;
	}

	public static User mockUserPatientDetails() {

		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static LaboratoryOrder mockLaboratoryOrderRetest() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUserRetest());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static User mockUserRetest() {

		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setLimsContactId(null);
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId(null);
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static LaboratoryOrder mockLaboratoryOrderParentid() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId(null);
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		// laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderException() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		// laboratoryOrderDetails.setReportableTestReportId("2L");
		// laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrders() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratoryid());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		// laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderPres() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratoryid());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		// laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		laboratoryOrderDetails.setOrderPreferences(mockLaboratoryOrderPreferences());
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static LaboratoryOrderPreferences mockLaboratoryOrderPreferences() {
		LaboratoryOrderPreferences LaboratoryOrderPreferences = new LaboratoryOrderPreferences();
		LaboratoryOrderPreferences.setId(2L);
		LaboratoryOrderPreferences.setLaboratoryOrder(mockLaboratoryOrder());
		// LaboratoryOrderPreferences.setNipsOptions(mo);
		return LaboratoryOrderPreferences;

	}

	public static ProcessLabOrdersPayload mockProcessLabOrdersPayload() {
		ProcessLabOrdersPayload processLabOrdersPayload = new ProcessLabOrdersPayload();
		processLabOrdersPayload.setAction(LabOrderUpdateActions.HOLD);
		processLabOrdersPayload.setRejectionReason("rejected");
		processLabOrdersPayload.setLabOrderIds(consents);
		return processLabOrdersPayload;

	}

	public static ProcessLabOrdersPayload mockProcessLabOrdersPayloadAction() {
		ProcessLabOrdersPayload processLabOrdersPayload = new ProcessLabOrdersPayload();
		processLabOrdersPayload.setAction(null);
		processLabOrdersPayload.setRejectionReason("rejected");
		processLabOrdersPayload.setLabOrderIds(consents);
		return processLabOrdersPayload;

	}

	public static Laboratory mockLaboratoryid() {
		Laboratory lab = new Laboratory();
		lab.setContact(DataBuilder.getMockPhone());
		lab.setDefaultLaboratory(true);
		// lab.setId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		lab.setLocation(DataBuilder.getMockAddress());
		lab.setMeta(DataBuilder.getMockMeta());
		lab.setName("San Diego");
		return lab;
	}

	public static LaboratoryOrder mockLaboratoryOrderEmpty() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		// laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		// laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderss() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static TestRun mockTestRun() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunRetests() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(true);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunRedraws() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(true);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunRedraw() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(true);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(true);
		testRun.setReflex(true);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(true);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunComplted() throws JsonProcessingException {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(true);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportComplted());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunForgettestReport() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(true);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportForgettestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestReport mockTestReportForgettestReport() {
		TestReport report = new TestReport();
		report.setId(null);
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestRun mockTestRunForgetreportabletestReport() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(true);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportForgetreportabletestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunForgetgetTestRun() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(true);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportForgetgetTestRun());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestReport mockTestReportForgetgetTestRun() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
//		report.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
//		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
//		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
//		report.setSignoutDetails(mockSignoutDetails());
//		report.setResultsUrl("url");
//		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
//		report.setOrderNumber("1234");
//		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
//		report.setPatient(mockUser());
//		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
//		report.setReportType(ReportType.STANDARD);
//		report.setResearchProjectName("researchProjectName");
//		report.setBatchRunId("8L");
//		report.setPipelineRunId("12345");
//		report.setCompletedAt(Calendar.getInstance());
//		report.setSignedOutType(SignedOutType.MANUAL);
//		report.setResultData(mockReport());
//		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		// report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setRejected(false);
//		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
//		report.setRetestRequestDate(Calendar.getInstance());
//		report.setRetestRequester("request");
		report.setReportable(true);
		report.setTestRun(null);
//		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportForgetreportabletestReport() {
		TestReport report = new TestReport();
		report.setId("2L");
//		report.setAvailable(true);
//		report.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
//		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
//		report.setFirstAvailableAt(Calendar.getInstance());
//		report.setApproved(true);
//		report.setSignedOut(true);
//		report.setSignoutDetails(mockSignoutDetails());
//		report.setResultsUrl("url");
//		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
//		report.setOrderNumber("1234");
//		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
//		report.setPatient(mockUser());
//		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
//		report.setNoOrder(true);
//		report.setControl(false);
//		report.setResearchSample(false);
//		report.setReportType(ReportType.STANDARD);
//		report.setResearchProjectName("researchProjectName");
//		report.setBatchRunId("8L");
//		report.setPipelineRunId("12345");
//		report.setCompletedAt(Calendar.getInstance());
//		report.setSignedOutType(SignedOutType.MANUAL);
//		report.setResultData(mockReport());
//		report.setSampleNumber("123455");
//		report.setDeliveredToProvider(true);
//		report.setDeliveredToPatient(true);
//		report.setDeliveredToPatientAt(Calendar.getInstance());
//		report.setViewedByPatient(true);
//		report.setViewedByPatientAt(Calendar.getInstance());
//		report.setRetestRequested(true);
//		report.setRetestRequestDate(Calendar.getInstance());
//		report.setRetestRequester("request");
//		report.setReportable(true);
//		report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestReport mockTestReportComplted() throws JsonProcessingException {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReportupdateWithStrings());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestRun mockTestRunKitId() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitIdEmpty());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static Kit mockKitIdEmpty() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7fff");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static List<LaboratoryStatus> statusupdate = new ArrayList<>();

	public static TestRun mockTestRunupdate() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitsupdate());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statusupdate);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunupdateKit() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(null);
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statusupdate);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static Kit mockKitsupdate() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(false);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static List<LaboratoryStatus> statusupdates = new ArrayList<>();

	public static TestRun mockTestRunupdateKits() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(null);
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statusupdates);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static List<LaboratoryStatus> statussaveTestRun = new ArrayList<>();

	public static TestRun mocksaveTestRun() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statussaveTestRun);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static List<LaboratoryStatus> statussaveTestRuns = new ArrayList<>();

	public static TestRun mocksaveTestRuns() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statussaveTestRuns);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mocksaveTestRunKit() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statussaveTestRuns);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mocksaveTestRunKitEmpty() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(null);
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statussaveTestRuns);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunConfigurationCounts() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportConfigurationCounts());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestReport mockTestReportConfigurationCounts() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(false);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		// report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestRun mockTestRunConfigurationCountss() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportConfigurationCountss());
		testRun.setReportConfiguration(ReportConfiguration.FST);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestReport mockTestReportConfigurationCountss() {
		TestReport report = new TestReport();
		report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.FST);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(false);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		// report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static TestRun mockTestRungetReport() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitssReport());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static List<LaboratoryStatus> getReportStatus = new ArrayList<>();

	public static TestRun mockTestRungetReportStatus() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitssReportStatus());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportStatus());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(getReportStatus);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestReport mockTestReportStatus() {
		TestReport report = new TestReport();
		// report.setId("2L");
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		// report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static Kit mockKitssReportStatus() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setTestRun(mockTestRunReportStatus());
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static List<LaboratoryStatus> statusReportStatus = new ArrayList<>();

	public static TestRun mockTestRunReportStatus() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportStatuses());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statusReportStatus);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestReport mockTestReportStatuses() {
		TestReport report = new TestReport();
		report.setId(null);
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		// report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static Kit mockKitssReport() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setTestRun(mockTestRun());
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunShippingStatus() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(true);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunReportEmpty() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(null);
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunRetest() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitRetest());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId(null);
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static Kit mockKitRetest() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("12345");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunRetestSample() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitSampleempty());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId(null);
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static Kit mockKitSampleempty() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber(null);
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunRetestpsdSample() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitPsdSampleempty());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId(null);
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static Kit mockKitPsdSampleempty() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("12345");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRunId() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("5L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static List<LaboratoryStatus> statuses = new ArrayList<>();

	public static TestRun mockTestRunStatus() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(statuses);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunDiffeId() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("5L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRunsupdate() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrderupdate());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestRun mockTestRuns() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReport());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static Kit mockKitss() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitSamplenumber() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber(null);
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitSamplenumberStripe() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitCode() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode(null);
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitCodeStripe() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRunUpsertRequest mockTestRunUpsertRequest() {

		TestRunUpsertRequest testRunUpsertRequest = new TestRunUpsertRequest();
		testRunUpsertRequest.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		testRunUpsertRequest.setTestRun(mockTestRun());
		return testRunUpsertRequest;

	}

	public static TestRunRetestPayload mockTestRunRetestPayload() {
		TestRunRetestPayload testRunRetestPayload = new TestRunRetestPayload();
		testRunRetestPayload.setCurrentTestRunId("1L");
		testRunRetestPayload.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		testRunRetestPayload.setPatientId("1L");
		testRunRetestPayload.setRequestRetest(true);
		testRunRetestPayload.setSetCurrentReportToNonReportable(true);
		return testRunRetestPayload;

	}

	public static TestRunRetestPayload mockTestRunRetestPayloadCurrentTestRunId() {
		TestRunRetestPayload testRunRetestPayload = new TestRunRetestPayload();
		testRunRetestPayload.setCurrentTestRunId(null);
		testRunRetestPayload.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		testRunRetestPayload.setPatientId("1L");
		testRunRetestPayload.setRequestRetest(true);
		testRunRetestPayload.setSetCurrentReportToNonReportable(true);
		return testRunRetestPayload;

	}

	public static ReportConfigurationPayload mockReportConfigurationPayload() {
		ReportConfigurationPayload reportConfigurationPayload = new ReportConfigurationPayload();
		reportConfigurationPayload.setKitId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		reportConfigurationPayload.setReportConfiguration(ReportConfiguration.FST);

		reportConfigurationPayload.setTestRunId("1L");
		reportConfigurationPayload.setSampleId("1L");
		return reportConfigurationPayload;
	}

	public static Kit mockKitsss() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Kit mockKitUnusable() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber(null);
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId(null);
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(true);
		kitss.setActivated(true);
		kitss.setUnusable(true);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static ShippingTransaction mockShippingTransaction() {
		ShippingTransaction shippingTransactionDetails = new ShippingTransaction();
		shippingTransactionDetails.setAmount(349.99f);
		shippingTransactionDetails.setCurrency(Currency.getInstance("USD"));
		// shippingTransactionDetails.setShippingDetails(mockShippingDetails());
		shippingTransactionDetails.setTransactionDate(Calendar.getInstance());
		shippingTransactionDetails.setId("1L");
		return shippingTransactionDetails;
	}

	public static ShippingTarget mockShippingTarget() {
		ShippingTarget toAddress = new ShippingTarget();
		toAddress.setAddress(DataBuilder.getMockAddress());
		toAddress.setId("5L");
		toAddress.setRecipientName("San Diego");
		toAddress.setPhone(DataBuilder.getMockPhone());
		return toAddress;
	}

	public static ShippingMethod mockShippingMethod() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetailsShippo());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.GROUND);
		return toMethod;

	}

	public static ShippingMethod mockShippingMethodShippo() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetailsShippo());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.GROUND);
		return toMethod;

	}

	public static ShippingMethod mockShippingMethodShippos() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(false);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetailsShippo());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.GROUND);
		return toMethod;

	}

	public static ShippingDetails mockShippingDetailsShippo() {
		ShippingDetails shippingDetails = new ShippingDetails();
		shippingDetails.setFulfillment(mockFulfillmentShippo());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		// shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		// shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static Fulfillment mockFulfillmentShippo() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItemShippo());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingShippos());
		return fulfillment;
	}

	public static ShippingDetails mockShippingShippos() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		// shippingDetails.setMeta(DataBuilder.getMockMeta());
		// shippingDetails.setReturnAddress(mockShippingTarget());
		// shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		// shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		// shippingDetails.setToAddress(mockShippingTarget());
		// shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static OrderLineItem mockOrderLineItemShippo() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderShippo());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<OrderStatus> orderStatusHistoryShippo = new ArrayList<>();

	public static Order mockOrderShippo() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(mockUser());
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistoryShippo);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static ShippingStatus mockShippingStatusCurrentStatus() {
		ShippingStatus shippingStatus = new ShippingStatus();
		shippingStatus.setCurrent(true);
		shippingStatus.setId("3L");
		// shippingStatus.setShippingDetails(mockShippingDetails());
		shippingStatus.setStatusTimestamp(Calendar.getInstance());
		shippingStatus.setToCustomer(true);
		shippingStatus.setStatus(ShippingStatusType.RETURN_ARRIVED);
		return shippingStatus;
	}

	public static ShippingStatus mockShippingStatusCurrentStatusAnother() {
		ShippingStatus shippingStatus = new ShippingStatus();
		shippingStatus.setCurrent(true);
		shippingStatus.setId("3L");
		// shippingStatus.setShippingDetails(mockShippingDetails());
		shippingStatus.setStatusTimestamp(Calendar.getInstance());
		shippingStatus.setToCustomer(true);
		shippingStatus.setStatus(ShippingStatusType.AWAITING_ASSEMBLY);
		return shippingStatus;
	}

	public static ShippingStatus mockShippingStatus() {
		ShippingStatus shippingStatus = new ShippingStatus();
		shippingStatus.setCurrent(true);
		shippingStatus.setId("3L");
		// shippingStatus.setShippingDetails(mockShippingDetails());
		shippingStatus.setStatusTimestamp(Calendar.getInstance());
		shippingStatus.setToCustomer(true);
		shippingStatus.setStatus(ShippingStatusType.ARRIVED);
		return shippingStatus;
	}

	public static List<ShippingStatus> shippingStatuss = new ArrayList<>();

	public static ShippingDetails mockShippingDetail() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingDetails mockShippingDetails() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		// shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		// shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static Fulfillment mockFulfillment() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitssReport());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentForPatientElseExample() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitssReport());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentForPatientElseExampless() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitssReport());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentWithAggregatePatient() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitssReport());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentLabel()
			throws AuthenticationException, InvalidRequestException, APIConnectionException, APIException {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitssReport());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailLabel());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailLabel()
			throws AuthenticationException, InvalidRequestException, APIConnectionException, APIException {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTargetLabel());
		shippingDetails.setReturnMethod(mockShippingMethodLabel());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransactionLabel());
		shippingDetails.setToAddress(mockShippingTargetLabel());
		shippingDetails.setToMethod(mockShippingMethodLabel());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodLabel()
			throws AuthenticationException, InvalidRequestException, APIConnectionException, APIException {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrierLabel());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		// com.shippo.model.Transaction retrieve =
		// com.shippo.model.Transaction.retrieve("89L");
		// toMethod.setLabelId(retrieve.getObjectId());
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetailsShippoLabel());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.GROUND);
		return toMethod;

	}

	public static ShippingCarrier mockShippingCarrierLabel() {
		ShippingCarrier shippingCarrier = new ShippingCarrier();
		shippingCarrier.setContactAddress(DataBuilder.getMockAddress());
		shippingCarrier.setContactPhone(DataBuilder.getMockPhone());
		shippingCarrier.setId("1L");
		shippingCarrier.setMeta(DataBuilder.getMockMeta());
		shippingCarrier.setName("jhon");
		return shippingCarrier;
	}

	public static ShippingDetails mockShippingDetailsShippoLabel() {
		ShippingDetails shippingDetails = new ShippingDetails();
		shippingDetails.setFulfillment(mockFulfillmentShippo());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTargetLabel());
		// shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransactionLabel());
		shippingDetails.setToAddress(mockShippingTargetLabel());
		// shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingTarget mockShippingTargetLabel() {
		ShippingTarget toAddress = new ShippingTarget();
		toAddress.setAddress(DataBuilder.getMockAddress());
		toAddress.setId("5L");
		toAddress.setRecipientName("San Diego");
		toAddress.setPhone(DataBuilder.getMockPhone());
		return toAddress;
	}

	public static ShippingTransaction mockShippingTransactionLabel() {
		ShippingTransaction shippingTransactionDetails = new ShippingTransaction();
		shippingTransactionDetails.setAmount(349.99f);
		shippingTransactionDetails.setCurrency(Currency.getInstance("USD"));
		// shippingTransactionDetails.setShippingDetails(mockShippingDetails());
		shippingTransactionDetails.setTransactionDate(Calendar.getInstance());
		shippingTransactionDetails.setId("1L");
		return shippingTransactionDetails;
	}

	public static Fulfillment mockFulfillmentLaboratory() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitss());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItemLaboratory());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static OrderLineItem mockOrderLineItemLaboratory() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderEmptyLab());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static LaboratoryOrder mockLaboratoryOrderEmptyLab() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static Fulfillment mockFulfillmentProduct() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitss());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItemProduct());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static OrderLineItem mockOrderLineItemProduct() {
		OrderLineItem orderLineItem = new OrderLineItem();
//		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(null);
//		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
//		orderLineItem.setDescription("Juno Early Fetal Sex Test");
//		orderLineItem.setDirectlyProvided(false);
//		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
//		orderLineItem.setInOfficeCollected(false);
//		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
//		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
//		orderLineItem.setOriginalUnitPrice(5f);
//		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProduct(mockProduct());
////		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
////		orderLineItem.setProductName("Juno Early Fetal Sex Test");
////		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
//		orderLineItem.setQuantity(1);
//		orderLineItem.setRequiresShipping(true);
//		orderLineItem.setSku("KIT238349");
//		orderLineItem.setTaxable(false);
//		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static Fulfillment mockFulfillmentcustomer() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitss());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItemcustomer());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static OrderLineItem mockOrderLineItemcustomer() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrdercustomer());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static Order mockOrdercustomer() {
		Order order = new Order();
		order.setId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		order.setOrderNumber("1234");
		order.setAmount(349.99f);
		order.setSubTotal(349.99f);
		order.setTotalShipping(5.99f);
		order.setTotalTax(0.0f);
		order.setWithInsurance(true);
		order.setCurrency(Currency.getInstance("USD"));
		order.setCustomer(null);
		order.setCheckoutId("63d1a928-05b7-45b8-9a5b-fdc85b736cef");
		order.setCartId("afd66f9d-84c0-4aa7-82e8-8b7fb41b42dd");
		order.setNotes("notes");
		order.setDiscount(mockDiscount());
		order.setTax(mockTax());
		// orderStatusHistory.add(mockOrderStatus());
		order.setOrderStatusHistory(orderStatusHistory);
		// lineItems.add(mockOrderLineItem());
		order.setLineItems(lineItems);
		order.setOrderedAt(Calendar.getInstance());
		order.setRequiresShipment(false);
		order.setResultsAvailable(false);
		order.setRequiresRedraw(false);
		order.setOpen(true);
		order.setRequiresProviderApproval(false);
		// order.setApprovingProviderName(null);
		order.setMeta(DataBuilder.getMockMeta());
		order.setShippingOrderId("3456");
		order.setInsuranceBillingOrderId("89878");
		order.setPriceBookId("989877");
		// order.setAmountDue(0);
		// order.setAmountPaid(0);
		// order.setCrmOrderId(null);
		// order.setCrmContactId(null);
		// customerActionRequests.add(mockCustomerActionRequest());
		order.setCustomerActionRequests(customerActionRequests);
		order.setTransactions(transactions);
		return order;
	}

	public static Fulfillment mockFulfillmentReportStatus() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitssReportStatus());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentShippingDetails() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		// fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentShippingDetailsgetToMethod() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailgetToMethod());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailgetToMethod() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		// shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static Fulfillment mockFulfillmentShippingDetailsgetReturnMethod() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailgetReturnMethod());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailgetReturnMethod() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		// shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static Fulfillment mockFulfillmentDiffId() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentcancel() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitcancel());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentCurrentStatus() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitcancel());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailCurrentStatus());
		return fulfillment;
	}

	public static List<ShippingStatus> shippingStatuCurrentStatus = new ArrayList<>();

	public static ShippingDetails mockShippingDetailCurrentStatus() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuCurrentStatus);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static Fulfillment mockFulfillmentCurrentStatusAnother() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitcancel());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailCurrentStatusAnother());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentCancelled() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setCancelled(true);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitcancel());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static List<ShippingStatus> shippingStatuCurrentStatusAnother = new ArrayList<>();

	public static ShippingDetails mockShippingDetailCurrentStatusAnother() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethod());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuCurrentStatusAnother);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethod());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static Kit mockKitcancel() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setTestRun(mockTestRuncancel());
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static TestRun mockTestRuncancel() {
		TestRun testRun = new TestRun();
		testRun.setBatch(mockBatchRun());
		testRun.setCompleted(false);
		testRun.setEndTime(Calendar.getInstance());
		testRun.setId("1L");
		testRun.setKit(mockKitss());
		testRun.setLaboratoryOrder(mockLaboratoryOrder());
		testRun.setLimsReportId("78788");
		testRun.setName("San Diego");
		testRun.setRedraw(false);
		testRun.setReflex(false);
		testRun.setReport(mockTestReportcancel());
		testRun.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		testRun.setRetest(false);
		testRun.setStartTime(Calendar.getInstance());
		// status.add(mockLaboratoryStatus());
		testRun.setStatus(status);
		testRun.setType(TestRunType.STANDARD);
		return testRun;
	}

	public static TestReport mockTestReportcancel() {
		TestReport report = new TestReport();
		report.setId(null);
		report.setAvailable(true);
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setEstimatedToBeAvailableAt(Calendar.getInstance());
		report.setFirstAvailableAt(Calendar.getInstance());
		report.setApproved(true);
		report.setSignedOut(true);
		report.setSignoutDetails(mockSignoutDetails());
		report.setResultsUrl("url");
		report.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		report.setOrderNumber("1234");
		report.setLabId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		report.setPatient(mockUser());
		report.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		report.setNoOrder(true);
		report.setControl(false);
		report.setResearchSample(false);
		report.setReportType(ReportType.STANDARD);
		report.setResearchProjectName("researchProjectName");
		report.setBatchRunId("8L");
		report.setPipelineRunId("12345");
		report.setCompletedAt(Calendar.getInstance());
		report.setSignedOutType(SignedOutType.MANUAL);
		report.setResultData(mockReport());
		report.setSampleNumber("123455");
		report.setDeliveredToProvider(true);
		report.setDeliveredToPatient(true);
		report.setDeliveredToPatientAt(Calendar.getInstance());
		report.setViewedByPatient(true);
		report.setViewedByPatientAt(Calendar.getInstance());
		report.setRetestRequested(true);
		report.setRetestRequestDate(Calendar.getInstance());
		report.setRetestRequester("request");
		report.setReportable(true);
		// report.setTestRun(mockTestRun());
		report.setMeta(DataBuilder.getMockMeta());
		return report;
	}

	public static Fulfillment mockFulfillmentElseTwoDay() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailElseTwoDay());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailElseTwoDay() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethodElseTwoDay());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethodElseTwoDay());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodElseTwoDay() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetails());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.TWO_DAY);
		return toMethod;

	}

	public static Fulfillment mockFulfillmentTwoDay() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailTwoDay());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailTwoDay() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethodTwoDay());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethodTwoDay());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodTwoDay() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetails());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.TWO_DAY);
		return toMethod;

	}

	public static Fulfillment mockFulfillmentFirstClass() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailFirstClass());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailFirstClass() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethodFirstClass());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethodTwoDay());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodFirstClass() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetails());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.FIRST_CLASS);
		return toMethod;

	}

	public static Fulfillment mockFulfillmentElseFirstClass() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailElseFirstClass());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailElseFirstClass() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethodElseFirstClass());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethodElseFirstClass());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodElseFirstClass() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetails());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.FIRST_CLASS);
		return toMethod;

	}

	public static Fulfillment mockFulfillmentOver() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailOver());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailOver() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethodOver());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethodOver());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodOver() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetails());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.OVERNIGHT);
		return toMethod;

	}

	public static Fulfillment mockFulfillmentElseOver() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailElseOver());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailElseOver() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethodElseOver());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethodElseOver());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodElseOver() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetails());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		toMethod.setType(ShippingDeliveryType.OVERNIGHT);
		return toMethod;

	}

	public static Fulfillment mockFulfillmentDefault() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailDefault());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailDefault() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethodDefault());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethodDefault());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodDefault() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetails());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		// toMethod.setType(ShippingDeliveryType.OVERNIGHT);
		return toMethod;

	}

	public static Fulfillment mockFulfillmentElseDefault() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetailElseDefault());
		return fulfillment;
	}

	public static ShippingDetails mockShippingDetailElseDefault() {
		ShippingDetails shippingDetails = new ShippingDetails();
		// shippingDetails.setFulfillment(mockFulfillment());
		shippingDetails.setId("7l");
		shippingDetails.setMeta(DataBuilder.getMockMeta());
		shippingDetails.setReturnAddress(mockShippingTarget());
		shippingDetails.setReturnMethod(mockShippingMethodElseDefault());
		// shippingStatuss.add(mockShippingStatus());
		shippingDetails.setShippingStatus(shippingStatuss);
		shippingDetails.setShippingTransactionDetails(mockShippingTransaction());
		shippingDetails.setToAddress(mockShippingTarget());
		shippingDetails.setToMethod(mockShippingMethodElseDefault());
		shippingDetails.setTrackingCode("68876");
		return shippingDetails;
	}

	public static ShippingMethod mockShippingMethodElseDefault() {
		ShippingMethod toMethod = new ShippingMethod();
		toMethod.setCarrier(mockShippingCarrier());
		toMethod.setDeliveryDescription("deleievery");
		toMethod.setEta(Calendar.getInstance());
		toMethod.setId("3L");
		toMethod.setLabelId("89L");
		toMethod.setReturn(true);
		toMethod.setShipped(true);
		toMethod.setShippingDetails(mockShippingDetails());
		toMethod.setTrackingCode("68876");
		toMethod.setTrackingUrl("url");
		// toMethod.setType(ShippingDeliveryType.OVERNIGHT);
		return toMethod;

	}

	public static Fulfillment mockFulfillmentactivateKit() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitactivateKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentactivateKits() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(true);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitactivateKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Kit mockKitactivateKit() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(false);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Fulfillment mockFulfillmentActivated() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitActivated());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Kit mockKitActivated() {
		Kit kitss = new Kit();
		kitss.setId("c06071ba-bf8e-414c-8622-2aa57d5b6a7f");
		kitss.setCode("JO135wwa33jj789");
		kitss.setSampleNumber("123455");
		kitss.setPsdSleeveNumber("9897987");
		kitss.setType(KitType.CAPILLARY);
		kitss.setTestRunId("1L");
		kitss.setAddedToLimsAt(Calendar.getInstance());
		kitss.setAssigned(false);
		kitss.setActivated(true);
		kitss.setUnusable(false);
		kitss.setMeta(DataBuilder.getMockMeta());
		return kitss;
	}

	public static Fulfillment mockFulfillmentupdateItem() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(true);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentOrderedAtDesc() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(true);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillmentd() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId(" ");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKit());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static Fulfillment mockFulfillments() {
		Fulfillment fulfillment = new Fulfillment();
		fulfillment.setCompleted(false);
		fulfillment.setEstimatedToShipAt(Calendar.getInstance());
		fulfillment.setFulfilledAt(Calendar.getInstance());
		fulfillment.setFulfillmentOrderId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		fulfillment.setFulfillmentProvider(mockFulfillmentProvider());
		fulfillment.setId("8fdf6101-f19a-4154-a36f-521528d02654");
		fulfillment.setKit(mockKitss());
		fulfillment.setMeta(DataBuilder.getMockMeta());
		// fulfillment.setOrderLineItem(mockOrderLineItem());
		fulfillment.setRedraw(false);
		fulfillment.setShipmentCreated(false);
		fulfillment.setShippingDetails(mockShippingDetail());
		return fulfillment;
	}

	public static List<Fulfillment> fulfillmentsActionRequest = new ArrayList<>();
	public static List<Fulfillment> fulfillmentsActionProduct = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionRequestProduct() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionProduct);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionRequestApproveProduct());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsActionRedraw = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionRedraw() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionRedraw);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderRedraw());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderRedraws());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsActionCustomerEmptyId = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionCustomerEmptyId() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionCustomerEmptyId);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderRedraw());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderCustomerEmptyId());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsActionRedraws = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionRedraws() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionRedraws);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderRedraw());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderRedraws());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemActionRequest() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionRequest);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionRequest());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsActionRequestCustomer = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionRequestCustomer() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionRequestCustomer);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionRequest());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemActionProduct() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionRequest);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderProduct());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsActionProductId = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionRequestProductId() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProductIdEmpty());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionProductId);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionRequest());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsActionLab = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionRequestLab() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionLab);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionRequest());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static Product mockProductIdEmpty() {
		Product product = new Product();
		product.setId(null);
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static List<Fulfillment> fulfillmentsActionRequests = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionRequests() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionRequests);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionRequestApproves());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsActionRequestApprove = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemActionRequestApprove() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsActionRequestApprove);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionRequestApprove());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillments = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemLabProcessingWithSample() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderLabProcessingWithSample());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentRetest = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemRetest() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentRetest);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderRetest());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderRetest());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<ElementsReport> elementsReport = new ArrayList<>();
	public static List<ElementsSampleDataSource> sampleDataSources = new ArrayList<>();
	public static List<ConcentrationValues> concentrationValues = new ArrayList<>();

	public static ElementsSampleDataSource mockElementsSampleDataSource() {
		ElementsSampleDataSource elementsSampleDataSource = new ElementsSampleDataSource();
		elementsSampleDataSource.setDataSourceId("1L");
		elementsSampleDataSource.setConcentrationValues(concentrationValues);
		elementsSampleDataSource.setId("1L");
		elementsSampleDataSource.setPlate(mockElementsPlate());
		elementsSampleDataSource.setStatus("status");
		elementsSampleDataSource.setWell(mockElementsWell());
		return elementsSampleDataSource;
	}

	public static ElementsPlate mockElementsPlate() {
		ElementsPlate elementsPlate = new ElementsPlate();
		elementsPlate.setBarcode("6527gs");
		elementsPlate.setColumns(1);
		elementsPlate.setPlateType("Type");
		elementsPlate.setRows(1);
		return elementsPlate;
	}

	public static ConcentrationValues mockConcentrationValues() {
		ConcentrationValues concentrationValues = new ConcentrationValues();
		concentrationValues.setConcentration("conc");
		concentrationValues.setCreatedAt("creat");
		return concentrationValues;
	}

	public static ElementsRerunResponse mockElementsRerunResponse() {
		ElementsRerunResponse elementsRerunResponse = new ElementsRerunResponse();
		elementsRerunResponse.setClinic(mockElementsClinic());
		elementsRerunResponse.setKit(mockElementsKit());
		elementsRerunResponse.setPatient(mockElementsPatient());
		elementsRerunResponse.setReports(elementsReport);
		elementsRerunResponse.setSampleDataSources(sampleDataSources);
		return elementsRerunResponse;

	}

	public static ElementsWell mockElementsWell() {
		ElementsWell elementsWell = new ElementsWell();
		elementsWell.setColumn("coloumn");
		elementsWell.setCreatedAt("crea");
		elementsWell.setSampleId(1);
		elementsWell.setId(1);
		elementsWell.setUpdatedAt("update");
		return elementsWell;
	}

	public static ElementsSample mockElementsSample() {
		ElementsSample elementsSample = new ElementsSample();
		elementsSample.setBarcode("bar");
		elementsSample.setId("1L");
		elementsSample.setContainerType("containerType");
		elementsSample.setCreatedAt(Calendar.getInstance());
		elementsSample.setSampleDataSources(sampleDataSources);
		elementsSample.setSampleType("sample");
		return elementsSample;
	}

	public static List<Rate> toRates = new ArrayList<>();
	public static List<Rate> returnRates = new ArrayList<>();

	public static MultipleRatesPayload mockMultipleRatesPayload() {
		MultipleRatesPayload multipleRatesPayload = new MultipleRatesPayload();
		multipleRatesPayload.setReturnRates(returnRates);
		multipleRatesPayload.setToRates(toRates);
		return multipleRatesPayload;

	}

	public static MultipleShippingLabelsDto mockMultipleShippingLabelsDto() {
		MultipleShippingLabelsDto multipleRatesPayload = new MultipleShippingLabelsDto();
		multipleRatesPayload.setReturnLabel(mockShipmentLabelDto());
		multipleRatesPayload.setToLabel(mockShipmentLabelDto());
		return multipleRatesPayload;
	}

	public static ShipmentLabelDto mockShipmentLabelDto() {
		ShipmentLabelDto shipmentLabelDto = new ShipmentLabelDto();
		shipmentLabelDto.setEta("eta");
		shipmentLabelDto.setLabelId("2L");
		shipmentLabelDto.setLabelUrl("labelUrl");
		shipmentLabelDto.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		shipmentLabelDto.setShippingRate(1);
		shipmentLabelDto.setTrackingNumber("345678");
		shipmentLabelDto.setTrackingStatus("address_issue");
		shipmentLabelDto.setTrackingUrl("url");
		shipmentLabelDto.setShippingSuccessStatus(true);
		return shipmentLabelDto;
	}

	public static GetSamplePayload mockGetSamplePayload() {
		GetSamplePayload getSamplePayload = new GetSamplePayload();
		getSamplePayload.setClinic(mockElementsClinic());
		getSamplePayload.setKit(mockElementsKit());
		getSamplePayload.setReports(elementsReport);
		getSamplePayload.setSampleDataSources(sampleDataSources);
		getSamplePayload.setSample(mockElementsSample());
		return getSamplePayload;
	}

	public static List<Fulfillment> fulfillmentCustomer = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemCustomer() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentCustomer);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderRetestCustomerEmpty());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentRerunRequest = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemRerunRequest() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentRerunRequest);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderRerunRequest());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentRerunRequests = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemRerunRequests() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentRerunRequest);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderRerunRequests());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentRuns = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemRuns() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentRuns);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderRuns());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderRerunRequests());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItem() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineitem() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsvalidateOwnership = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemvalidateOwnership() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsvalidateOwnership);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsLaboratoryOrdersForPatients = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemLaboratoryOrdersForPatients() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsLaboratoryOrdersForPatients);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsForPatient = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemForPatient() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsForPatient);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsWithAggregateWithRelationshipAggregate = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemWithAggregateWithRelationshipAggregate() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsWithAggregateWithRelationshipAggregate);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsWithAggregate = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemWithAggregate() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsWithAggregate);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsWithAggregates = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemWithAggregates() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsWithAggregates);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsForPatientElseExample = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemForPatientElseExample() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsForPatientElseExample);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderForPatientElseExample());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsForPatientElses = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemForPatientElses() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsForPatientElses);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderForPatientElseExample());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> OrderLineitemupdateShippingfulfillments = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemupdateShippingFulfillments() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(OrderLineitemupdateShippingfulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> OrderLineitemfulfillments = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemFulfillments() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(OrderLineitemfulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> OrderLineitemfulfillmentss = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemFulfillmentss() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(OrderLineitemfulfillmentss);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> OrderLineitemProduct = new ArrayList<>();

	public static OrderLineItem mockOrderLineitemProduct() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(OrderLineitemProduct);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineitemLaboratoryOrderDetails() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderItem());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineitemLaboratoryOrderDetailsEmpty() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderItem());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingDetails = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingDetails() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingDetails);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShipmentPayload = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShipmentPayload() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShipmentPayload);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingElseStatus = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingElseStatus() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingElseStatus);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatus = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatus() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatus);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatusTwoDay = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatusTwoDay() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatusTwoDay);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatusElseTwoDay = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatusElseTwoDay() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatusElseTwoDay);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatusElseFirstClass = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatusElseFirstClass() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatusElseFirstClass);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatusFirstClass = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatusFirstClass() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatusFirstClass);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatusElseOver = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatusElseOver() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatusElseOver);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatusOver = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatusOver() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatusOver);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatusDefault = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatusDefault() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatusDefault);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShippingStatusElseDefault = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShippingStatusElseDefault() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentShippingStatusElseDefault);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentactivateKit = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemactivateKit() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentactivateKit);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentactivateKitfulfillmentComplted = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemactivateKitfulfillmentComplted() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentactivateKitfulfillmentComplted);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentactivateKitActivated = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemactivateKitActivated() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentactivateKitActivated);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderactivateKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
		orderLineItem.setProduct(mockProduct());
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentLabReceipt = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemFromLabReceipt() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentLabReceipt);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemapprovingProvider() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderapprovingProvider());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderapprovingProvider());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemapprovingProviders() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderapprovingProviders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderapprovingProvider());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static LaboratoryOrder mockLaboratoryOrderapprovingProviders() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalapprovingProviders());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderapprovingProvider() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalapprovingProvider());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);

		return laboratoryOrderDetails;
	}

	public static ProviderApproval mockProviderApprovalapprovingProviders() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(true);
		providerApproval.setApprovingProvider(mockapprovingProvider());
		providerApproval.setRequiresApproval(false);
		return providerApproval;
	}

	public static ProviderApproval mockProviderApprovalapprovingProvider() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(true);
		providerApproval.setApprovingProvider(mockapprovingProviderapprovingProvider());
		providerApproval.setRequiresApproval(true);
		return providerApproval;
	}

	public static Provider mockapprovingProviderapprovingProvider() {
		Provider approvingProvider = new Provider();
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-email@junodx.com");
		approvingProvider.setFirstName("Ralphie");
		approvingProvider.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		approvingProvider.setLastName("Jones");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId(null);
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("234234324");
		approvingProvider.setPractice(DataBuilder.getMockPractice());
		approvingProvider.setPracticing(true);
		// approvingProvider.setSalesforceId(null);
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.NEW);
		approvingProvider.setUpin("345435435345");
		// approvingProvider.setXifinId(null);
		return approvingProvider;
	}

	public static OrderLineItem mockOrderLineItemDefaultPractice() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderDefaultPractice());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderDefaultPractice());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static LaboratoryOrder mockLaboratoryOrderDefaultPractice() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderDefaultPractice());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalDefault());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static ProviderApproval mockProviderApprovalDefault() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(true);
		// providerApproval.setApprovingProvider(mockapprovingProvider());
		providerApproval.setRequiresApproval(true);
		return providerApproval;
	}

	public static OrderLineItem mockOrderLineItemRequiresApproval() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderRequiresApproval());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderDefaultProvider());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static LaboratoryOrder mockLaboratoryOrderRequiresApproval() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		// laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static OrderLineItem mockOrderLineItemIds() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemTestReportForOrder() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderTestReportForOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemForgettestReport() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderForgettestReport());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemForgetreportabletestReport() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderForgetreportabletestReport());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemForgetgetTestRun() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderForgetgetTestRun());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemForgetcurrentTestRun() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderForgetcurrentTestRun());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemForgetcurrentTestRuns() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderForgetcurrentTestRuns());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemForgetCompleted() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderForgetCompleted());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemForgetRedraw() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderForgetRedraw());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<TestRun> testRunsTestReportRedraw = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderForgetRedraw() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportRedraw);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsTestReportCompleted = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderForgetCompleted() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportCompleted);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsTestReportcurrentTestRuns = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderForgetcurrentTestRuns() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId(null);
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportcurrentTestRuns);

		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderForgetcurrentTestRun() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("8L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportForgetgetTestRun);

		return laboratoryOrderDetails;
	}

	public static OrderLineItem mockOrderLineItemForgetgetTestRuns() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderForgetgetTestRun());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemTestReportForOrders() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderTestReportForOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemTestReportForForgetOrders() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		// orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderTestReportForOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlines());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<TestRun> testRunsTestReportForOrder = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderTestReportForOrder() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportForOrder);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsTestReportForgetgetTestRun = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderForgetgetTestRun() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportForgetgetTestRun);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsTestReportForgetreportabletestReport = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderForgetreportabletestReport() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("8L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportForgetreportabletestReport);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsTestReportForgettestReport = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderForgettestReport() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportForgettestReport);

		return laboratoryOrderDetails;
	}

	public static List<TestRun> testRunsTestReportForOrders = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderTestReportForOrders() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratory());
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		// laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId("2L");
		laboratoryOrderDetails.setReportableTestRunId("1L");
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRunsTestReportForOrders);

		return laboratoryOrderDetails;
	}

	public static OrderLineItem mockOrderLineItemId() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("8");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlineItemsId());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillments1 = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemFulfillment1() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillments1);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsUpdateData = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemFulfillmentUpdateData() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsUpdateData);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlineItemsfulfillmentUpdateData());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsUpdateDatas = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemFulfillmentUpdateDatas() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillmentsUpdateData);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlineItemsfulfillmentUpdateData());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemFulfillmentEmpty() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments1);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemkit() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrder());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderKit());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemWithoutLab() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemWithoutPatient() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderPatient());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static LaboratoryOrder mockLaboratoryOrderPatient() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratoryid());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		// laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		// laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static LaboratoryOrder mockLaboratoryOrderPatients() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratoryid());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		// laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrder());
		laboratoryOrderDetails.setPatient(mockUserPatients());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApprovalPatient());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(testRuns);
		return laboratoryOrderDetails;
	}

	public static User mockUserPatients() {

		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		u.setId("1L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static ProviderApproval mockProviderApprovalPatient() {
		ProviderApproval providerApproval = new ProviderApproval();
		providerApproval.setApprovalDate(Calendar.getInstance());
		providerApproval.setApproved(true);
		providerApproval.setApprovingProvider(mockapprovingProviderPatient());
		providerApproval.setRequiresApproval(true);
		return providerApproval;
	}

	public static Provider mockapprovingProviderPatient() {
		Provider approvingProvider = new Provider();
		approvingProvider.setUser(mockUserPatient());
		approvingProvider.setContactAddress(DataBuilder.getMockAddress());
		approvingProvider.setContactPhone(DataBuilder.getMockPhone());
		approvingProvider.setDefaultProvider(true);
		approvingProvider.setEmail("no-email@junodx.com");
		approvingProvider.setFirstName("Ralphie");
		approvingProvider.setId("b1ee000c-f947-46d9-b3df-e5f53cae34b3");
		approvingProvider.setLastName("Jones");
		licenses.add(DataBuilder.getMockMedicalLicense());
		approvingProvider.setLicenses(licenses);
		approvingProvider.setLimsId("78788");
		approvingProvider.setMeta(DataBuilder.getMockMeta());
		approvingProvider.setNpi("234234324");
		approvingProvider.setPractice(DataBuilder.getMockPractice());
		approvingProvider.setPracticing(true);
		// approvingProvider.setSalesforceId(null);
		// specialties.add(mockSpecialty());
		approvingProvider.setSpecialties(specialties);
		approvingProvider.setStatus(UserStatus.NEW);
		approvingProvider.setUpin("345435435345");
		// approvingProvider.setXifinId(null);
		return approvingProvider;
	}

	public static User mockUserPatient() {

		User u = new User();
		u.setUsername("General_test_user");
		u.setFirstName("Juno_test");
		u.setLastName("User");
		u.setEmail("no-email@junodx.com");
		u.setUserType(UserType.TEST);
		u.setDateOfBirth("1997-12-15");
		u.setPatientDetails(DataBuilder.mockPatientDetails());
		u.setLimsContactId("78788");
		u.setId("5L");
		u.setActivated(true);
		u.setStatus(UserStatus.ACTIVATED);
		u.setActivationTs(Calendar.getInstance());
		u.setPrimaryPhone(DataBuilder.getMockPhone());
		u.setBillingAddress(DataBuilder.getMockAddress());
		u.setPreferences(DataBuilder.getMockPreferences());
		return u;

	}

	public static OrderLineItem mockOrderLineItemWithoutLabs() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		// orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionLab());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemWithoutTestRun() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderTesRunEmpty());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderActionTestRuns());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemWithoutTestRuns() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setProduct(mockProduct());
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrderTesRunEmptys());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderTestRun());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static LaboratoryOrder mockLaboratoryOrderTesRunEmptys() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratoryid());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		// laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderActionTestRuns());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(tesRunEmpty);
		return laboratoryOrderDetails;
	}

	public static List<TestRun> tesRunEmpty = new ArrayList<>();

	public static LaboratoryOrder mockLaboratoryOrderTesRunEmpty() {
		LaboratoryOrder laboratoryOrderDetails = new LaboratoryOrder();
		laboratoryOrderDetails.setDateReceivedInLab(Calendar.getInstance());
		laboratoryOrderDetails.setEstArrivalInLab(Calendar.getInstance());
		laboratoryOrderDetails.setId("76c97d43-347f-4132-ba18-ddf3b313c226");
		laboratoryOrderDetails.setLab(mockLaboratoryid());
		laboratoryOrderDetails.setLimsOrderId(null);
		laboratoryOrderDetails.setLimsReportId("78788");
		laboratoryOrderDetails.setMeta(DataBuilder.getMockMeta());
		laboratoryOrderDetails.setNotes("notes");
		// laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		laboratoryOrderDetails.setOrderLineItem(mockOrderLineItem());
		laboratoryOrderDetails.setOrderType(OrderType.SELF_CREATED);
		laboratoryOrderDetails.setParentOrder(mockOrderActionTestRuns());
		laboratoryOrderDetails.setPatient(mockUser());
		laboratoryOrderDetails.setPatientConsent(mockConsent());
		laboratoryOrderDetails.setProviderApproval(mockProviderApproval());
		laboratoryOrderDetails.setReportableTestReportId(null);
		laboratoryOrderDetails.setReportableTestRunId(null);
		laboratoryOrderDetails.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		laboratoryOrderDetails.setRequisitionFormUrl("https://somewhere.ons3.com/finditpath.df3");
		// testRuns.add(mockTestRun());
		laboratoryOrderDetails.setTestRuns(tesRunEmpty);
		return laboratoryOrderDetails;
	}

	public static OrderLineItem mockOrderLineItemss() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		// orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItems() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentsOrderedAtDesc = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemsOrderedAtDesc() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setFulfillments(fulfillmentsOrderedAtDesc);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrder());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<Fulfillment> fulfillmentShipping = new ArrayList<>();

	public static OrderLineItem mockOrderLineItemShipping() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setFulfillments(fulfillmentShipping);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderShipping());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemsOrder() {
		OrderLineItem orderLineItem = new OrderLineItem();
		orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderLineItem.setAmount(349.99f);
		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderLineItem.setDescription("Juno Early Fetal Sex Test");
		orderLineItem.setDirectlyProvided(false);
		orderLineItem.setInOfficeCollected(false);
		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
		orderLineItem.setMeta(DataBuilder.getMockMeta());
		orderLineItem.setOrder(mockOrderlineitems());
		orderLineItem.setOriginalUnitPrice(5f);
		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
		orderLineItem.setQuantity(1);
		orderLineItem.setRequiresShipping(true);
		orderLineItem.setSku("KIT238349");
		orderLineItem.setTaxable(false);
		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static OrderLineItem mockOrderLineItemOrderExcep() {
		OrderLineItem orderLineItem = new OrderLineItem();
//		orderLineItem.setFulfillments(fulfillments);
		orderLineItem.setId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
//		orderLineItem.setAmount(349.99f);
//		orderLineItem.setCurrentFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
//		orderLineItem.setDescription("Juno Early Fetal Sex Test");
//		orderLineItem.setDirectlyProvided(false);
//		orderLineItem.setInOfficeCollected(false);
//		orderLineItem.setInsuranceEstimatedCoveredAmount(5f);
//		orderLineItem.setLaboratoryOrderDetails(mockLaboratoryOrders());
//		orderLineItem.setMeta(DataBuilder.getMockMeta());
//	//	orderLineItem.setOrder(mockOrder());
//		orderLineItem.setOriginalUnitPrice(5f);
//		orderLineItem.setPriceBookEntryId(null);
//		orderLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		orderLineItem.setProductName("Juno Early Fetal Sex Test");
//		orderLineItem.setProductImageUrl("Juno Early Fetal Sex Test");
//		orderLineItem.setQuantity(1);
//		orderLineItem.setRequiresShipping(true);
//		orderLineItem.setSku("KIT238349");
//		orderLineItem.setTaxable(false);
//		orderLineItem.setType(ProductType.TEST);
		return orderLineItem;

	}

	public static List<CheckoutLineItem> itemss = new ArrayList<>();

	public static CheckoutLineItem mockCheckoutLineItems() throws StripeException {
		CheckoutLineItem checkoutLineItem = new CheckoutLineItem();
		checkoutLineItem.setAmount(99f);
		checkoutLineItem.setCheckout(mockCheckout());
		checkoutLineItem.setCurrency("USD");
		checkoutLineItem.setId("2L");
		// checkoutLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		checkoutLineItem.setQuantity(1);
		checkoutLineItem.setShipped(false);
		return checkoutLineItem;
	}

	Map<String, Object> paramsC = new HashMap<>();

	public static UserCheckout mockCustomers() throws StripeException {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("15-12-1997");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("12345678");
		customer.setShippingAddress(DataBuilder.getMockAddress());
		Map<String, Object> paramsC = new HashMap<>();
		Customer customers = Customer.create(paramsC);
		customer.setStripeCustomerId(customers.getId());
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static CheckoutLineItem mockCheckoutLineItem() {
		CheckoutLineItem checkoutLineItem = new CheckoutLineItem();
		checkoutLineItem.setAmount(99f);
		checkoutLineItem.setCheckout(mockCheckout());
		checkoutLineItem.setCurrency("USD");
		checkoutLineItem.setId("2L");
		checkoutLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		checkoutLineItem.setQuantity(1);
		checkoutLineItem.setShipped(false);
		return checkoutLineItem;
	}

	public static UserCheckout mockUserCheckoutCustomers() throws StripeException {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("15-12-1997");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("12345678");
		customer.setShippingAddress(DataBuilder.getMockAddress());
		Map<String, Object> paramsC = new HashMap<>();
		Customer customers = Customer.create(paramsC);
		customer.setStripeCustomerId(customers.getId());
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static UserOrderDto mockCustomerShipping() throws StripeException {
		UserOrderDto customer = new UserOrderDto();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("15-12-1997");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("12345678");
		customer.setPrimaryAddress(getMockAddress());
		Map<String, Object> paramsC = new HashMap<>();
		Customer customers = Customer.create(paramsC);
		customer.setStripeCustomerId(customers.getId());
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static UserOrderDto mockCustomersException() throws StripeException {
		UserOrderDto customer = new UserOrderDto();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName(null);
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setPrimaryAddress(getMockAddress());
		Map<String, Object> paramsC = new HashMap<>();
		Customer customers = Customer.create(paramsC);
		customer.setStripeCustomerId(customers.getId());
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static List<CheckoutLineItem> itemsCheckout = new ArrayList<>();

	public static Checkout mockCheckout() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckouts());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckout);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static Checkout mockCheckoutUsers() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckouts());
		checkout.setFetalSexResultsPreferences(getMockFetalSexResultsPreferencesUsers());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckout);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		// checkout.setTotalAmount(0.0f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static FetalSexResultsPreferences getMockFetalSexResultsPreferencesUsers() {
		FetalSexResultsPreferences fetalSexResultsPreferences = new FetalSexResultsPreferences();
		fetalSexResultsPreferences.setFstResultsDelegatedEmail("");
		fetalSexResultsPreferences.setGenderDelegated(true);
		fetalSexResultsPreferences.setGenderFanfare(true);
		fetalSexResultsPreferences.setGenderTerms(GenderTerms.XX_XY);
		return fetalSexResultsPreferences;
	}

	public static List<CheckoutLineItem> itemsCheckoutAnother = new ArrayList<>();

	public static Checkout mockCheckoutAno() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAnother());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutAnother);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutNoCharge = new ArrayList<>();

	public static Checkout mockCheckoutNoCharge() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setDiscountApplied(null);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAnother());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutNoCharge);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static UserCheckout mockUserCheckoutAnother() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId(null);
		customer.setDateOfBirth(null);
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone(null);
		customer.setShippingAddress(DataBuilder.getMockAddress());

		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static List<CheckoutLineItem> itemsCheckoutlmp = new ArrayList<>();

	public static Checkout mockCheckoutlmp() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setDiscountApplied(null);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAnother());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutlmp);
		// checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutlmps = new ArrayList<>();

	public static Checkout mockCheckoutlmps() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setDiscountApplied(null);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAnother());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutlmp);
		// checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutApprovingProvider = new ArrayList<>();

	public static Checkout mockCheckoutApprovingProvider() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAnother());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutApprovingProvider);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutApprovingProviders = new ArrayList<>();

	public static Checkout mockCheckoutApprovingProviders() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAnother());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutApprovingProviders);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutApprovingProviderWithoutUser = new ArrayList<>();

	public static Checkout mockCheckoutApprovingProviderWithoutUser() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutWithoutUser());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutApprovingProviderWithoutUser);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static UserCheckout mockUserCheckoutWithoutUser() throws StripeException {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId(null);
		customer.setDateOfBirth(null);
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone(null);
		customer.setShippingAddress(getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static List<CheckoutLineItem> itemsCheckoutApprovingProviderUser = new ArrayList<>();

	public static Checkout mockCheckoutApprovingProviderUser() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setDiscountApplied(mockDiscount());
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutApprovingProviderUser);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutApprovingProviderUserLmp = new ArrayList<>();

	public static Checkout mockCheckoutApprovingProviderUserLmp() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setDiscountApplied(mockDiscount());
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutApprovingProviderUserLmp);
		// checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutApprovingProviderUserLmps = new ArrayList<>();

	public static Checkout mockCheckoutApprovingProviderUserLmps() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		// checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setDiscountApplied(mockDiscount());
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutApprovingProviderUserLmps);
		// checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutAvailableUnits = new ArrayList<>();

	public static Checkout mockCheckoutAvailableUnits() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutAvailableUnits);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemsCheckoutAvailableUnitss = new ArrayList<>();

	public static Checkout mockCheckoutAvailableUnitss() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckoutAvailableUnitss);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static Checkout mockCheckoutCustomerEmpty() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		// checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsCheckout);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> itemssaveCheckout = new ArrayList<>();

	public static Checkout mockCheckoutsave() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemssaveCheckout);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;
	}

	public static List<CheckoutLineItem> inventoryItem = new ArrayList<>();

	public static Checkout mockCheckoutInventoryItem() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAsNull());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(inventoryItem);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> inventoryItems = new ArrayList<>();

	public static Checkout mockCheckoutInventoryItems() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAsNull());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(inventoryItems);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> inventoryItemsLab = new ArrayList<>();

	public static Checkout mockCheckoutLab() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAsNull());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(inventoryItemsLab);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> inventoryItemss = new ArrayList<>();

	public static Checkout mockCheckoutInventoryItemss() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutAsNull());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(inventoryItems);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static UserCheckout mockUserCheckoutAsNull() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId(null);
		customer.setCustomerId(null);
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static Checkout mockCheckoutInventoryUser() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(inventoryItem);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static Checkout mockCheckoutInventoryUsers() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(inventoryItem);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> inventoryitemsDefaultPractice = new ArrayList<>();

	public static Checkout mockCheckoutInventoryDefaultPractice() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(inventoryitemsDefaultPractice);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> inventoryitems = new ArrayList<>();

	public static Checkout mockCheckoutInventoryUse() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(inventoryitems);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> itemsDefaultProviderForPractice = new ArrayList<>();

	public static Checkout mockCheckoutDefaultProviderForPractice() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsDefaultProviderForPractice);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> itemsDefaultProviderForPractices = new ArrayList<>();

	public static Checkout mockCheckoutDefaultProviderForPractices() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		// checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsDefaultProviderForPractices);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> itemsUser = new ArrayList<>();

	public static Checkout mockCheckoutUser() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsUser);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> itemsproduct = new ArrayList<>();

	public static Checkout mockCheckoutproduct() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsproduct);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static List<CheckoutLineItem> itemsproducts = new ArrayList<>();

	public static Checkout mockCheckoutproducts() throws StripeException {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(itemsproduct);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static Checkout mockCheckoutException() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		// checkout.setCustomer(mockCustomer());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(items);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static Checkout mockCheckoutExceptionss() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutExceptionss());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(items);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static Checkout mockCheckoutExceptions() {
		Checkout checkout = new Checkout();
		checkout.setAgreedToInformedConsent(true);
		checkout.setAgreedToTerms(true);
		checkout.setAgreeNoTransplantNorTransfusion(true);
		checkout.setApprovingProviderDesignated(false);
		checkout.setClientId("12345");
		checkout.setConception(Calendar.getInstance());
		checkout.setCurrency("USD");
		checkout.setCustomer(mockUserCheckoutException());
		checkout.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkout.setId("1L");
		checkout.setApprovingProvider(mockapprovingProvider());
		// items.add(mockCheckoutLineItem());
		checkout.setItems(items);
		checkout.setLmpDate(Calendar.getInstance());
		checkout.setLoggedInSession(true);
		checkout.setMeta(DataBuilder.getMockMeta());
		checkout.setOrderNumber("1234");
		checkout.setPaymentMethod(PaymentMethodType.card);
		checkout.setProcessor(PaymentProcessingType.STRIPE);
		checkout.setServiceOptions(mockServiceOptions());
		checkout.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		checkout.setTotalAmount(99f);
		checkout.setWithInsurance(false);
		return checkout;

	}

	public static UserCheckout mockUserCheckoutException() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddress());
		// customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static UserCheckout mockUserCheckoutExceptionss() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setId("1L");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static InventoryUpdatePayload mockInventoryUpdatePayload() {
		InventoryUpdatePayload inventoryUpdatePayload = new InventoryUpdatePayload();
		inventoryUpdatePayload.setAvailable(true);
		inventoryUpdatePayload.setAvailableUnits(1L);
		inventoryUpdatePayload.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		inventoryUpdatePayload.setReleased(true);
		return inventoryUpdatePayload;
	}

	public static InventoryUpdatePayload mockInventoryUpdatePayloadProductId() {
		InventoryUpdatePayload inventoryUpdatePayload = new InventoryUpdatePayload();
		inventoryUpdatePayload.setAvailable(null);
		inventoryUpdatePayload.setAvailableUnits(null);
		inventoryUpdatePayload.setProductId(null);
		inventoryUpdatePayload.setReleased(null);
		return inventoryUpdatePayload;
	}

	public static InventoryUpdatePayload mockInventoryUpdatePayloads() {
		InventoryUpdatePayload inventoryUpdatePayload = new InventoryUpdatePayload();
		inventoryUpdatePayload.setAvailable(null);
		inventoryUpdatePayload.setAvailableUnits(null);
		inventoryUpdatePayload.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		inventoryUpdatePayload.setReleased(null);
		return inventoryUpdatePayload;
	}

	public static ProductTruncatedDto mockProductTruncatedDto() {
		ProductTruncatedDto productTruncatedDto = new ProductTruncatedDto();
		productTruncatedDto.setActive(true);
		productTruncatedDto.setCurrency(Currency.getInstance("USD"));
		productTruncatedDto.setDimensions(mockProductDimensions());
		productTruncatedDto.setId("1L");
		productTruncatedDto.setName("Juno Early Fetal Sex Test");
		productTruncatedDto.setPrice(1f);
		productTruncatedDto.setShippable(true);
		productTruncatedDto.setSku("SKU");
		productTruncatedDto.setTaxable(true);
		productTruncatedDto.setType(ProductType.TEST);
		return productTruncatedDto;
	}

	public static ProductAvailabilityDto mockProductAvailabilityDto() {
		ProductAvailabilityDto productAvailabilityDto = new ProductAvailabilityDto();
		productAvailabilityDto.setAllowedDMAs(allowedDMAs);
		productAvailabilityDto.setAllowedStates(allowedStates);
		productAvailabilityDto.setAllowedZipCodes(allowedZipCodes);
		productAvailabilityDto.setAvailableInYourRegionAt(Calendar.getInstance());
		productAvailabilityDto.setId(1L);
		productAvailabilityDto.setMeta(DataBuilder.getMockMeta());
		productAvailabilityDto.setNewStockAvailableAt(Calendar.getInstance());
		productAvailabilityDto.setProduct(mockProductTruncatedDto());
		productAvailabilityDto.setSoldOut(true);
		return productAvailabilityDto;

	}

	public static ProductAvailabilityDto mockProductAvailabilityDtoId() {
		ProductAvailabilityDto productAvailabilityDto = new ProductAvailabilityDto();
		productAvailabilityDto.setAllowedDMAs(allowedDMAs);
		productAvailabilityDto.setAllowedStates(allowedStates);
		productAvailabilityDto.setAllowedZipCodes(allowedZipCodes);
		productAvailabilityDto.setAvailableInYourRegionAt(Calendar.getInstance());
		// productAvailabilityDto.setId(1L);
		productAvailabilityDto.setMeta(DataBuilder.getMockMeta());
		productAvailabilityDto.setNewStockAvailableAt(Calendar.getInstance());
		productAvailabilityDto.setProduct(mockProductTruncatedDto());
		productAvailabilityDto.setSoldOut(true);
		return productAvailabilityDto;

	}

	public static ProductAvailabilityResponsePayload mockProductAvailabilityResponsePayload() {
		ProductAvailabilityResponsePayload productAvailabilityResponsePayload = new ProductAvailabilityResponsePayload();
		productAvailabilityResponsePayload.setAsOf(Calendar.getInstance());
		productAvailabilityResponsePayload.setInventoryLeft(3L);
		productAvailabilityResponsePayload.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		productAvailabilityResponsePayload.setAvailable(true);

		return productAvailabilityResponsePayload;
	}

	public static List<Laboratory> laboratoryProviders = new ArrayList<>();

//	public static ProductDimensions mockProductDimensions = new ProductDimensions(1.5f, 4.5f, 8.0f, 0.8f, LengthUnit.in,
//			WeightUnit.lb);
	public static ProductDimensions mockProductDimensions() {
		ProductDimensions dimensions = new ProductDimensions();
		dimensions.setHeight(1.5f);
		dimensions.setLength(8.0f);
		dimensions.setLengthUnits(LengthUnit.in);
		dimensions.setWeight(0.8f);
		dimensions.setWeightUnits(WeightUnit.lb);
		dimensions.setWidth(4.5f);
		return dimensions;
	}

	public static List<FulfillmentProvider> fulfillmentProviders = new ArrayList<>();

	public static Product mockProduct() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductInventory() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		product.setInventoryItem(mockInventoryItem());
		return product;
	}

	public static Product mockProductupdate() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setProductConfiguration(mockProductConfiguration());
		product.setCurrency(Currency.getInstance("USD"));
		// product.setTestDetails(mockLaboratoryOrderTestDetails());
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId("789800");
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId("12179");
		product.setAlliedPackageUnitId("5446769080");
		product.setAvailablity(null);
		product.setInventoryItem(mockInventoryItem());
		return product;
	}

	public static Product mockProductupdateException() {
		Product product = new Product();
//		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
//		product.setName("Juno Early Fetal Sex Test");
//		product.setLongDescription("Fetal Sex Testing");
//		product.setShortDescription("Fetal Sex Testing");
//		product.setType(ProductType.TEST);
//		product.setActive(true);
//		product.setShippable(true);
//		product.setTaxable(true);
//		product.setReportConfiguration(ReportConfiguration.FST);
//		product.setRequiresProviderApproval(true);
//		product.setDimensions(mockProductDimensions());
//		product.setPrice(99.0f);
//		product.setProductConfiguration(mockProductConfiguration());
//		product.setCurrency(Currency.getInstance("USD"));
//		product.setTestDetails(mockLaboratoryOrderTestDetails());
//		// fulfillmentProviders.add(mockFulfillmentProvider());
//		//product.setFulfillmentProviders(fulfillmentProviders);
//	//	laboratoryProviders.add(mockLaboratory());
//	//	product.setLaboratoryProviders(laboratoryProviders);
//		product.setXifinTestId("BSX-FST-0001");
//		product.setStripeProductId(null);
//		product.setCardConnectProductId("789800");
//		product.setSalesforceProductId("01t03000003CWt6AAG");
//		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
//		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
//		product.setAllowsAssistedCollectionVideoCall(true);
//		product.setAllowsSelfCollectedVideoUpload(true);
//		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
//		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
//		product.setLimsReportId("78788");
//		product.setSku("KIT238349");
//		product.setSalesforcePriceBookEntryId("12179");
//		product.setAlliedPackageUnitId("5446769080");
//		product.setAvailablity(null);
//		product.setInventoryItem(mockInventoryItem());
		return product;
	}

	public static Product mockProductupdates() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setProductConfiguration(mockProductConfiguration());
		product.setCurrency(Currency.getInstance("USD"));
		// product.setTestDetails(mockLaboratoryOrderTestDetailss());
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId("789800");
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId("12179");
		product.setAlliedPackageUnitId("5446769080");
		product.setAvailablity(null);
		product.setInventoryItem(mockInventoryItem());
		return product;
	}

//	public static LaboratoryOrderTestDetails mockLaboratoryOrderTestDetailss() {
//		LaboratoryOrderTestDetails laboratoryOrderTestDetails = new LaboratoryOrderTestDetails();
//		laboratoryOrderTestDetails.setExclusionList("exclus");
//		laboratoryOrderTestDetails.setProductName("Juno Early Fetal Sex Tests");
//		laboratoryOrderTestDetails.setInclusionList("inclusionss");
//		return laboratoryOrderTestDetails;
//
//	}

//	public static LaboratoryOrderTestDetails mockLaboratoryOrderTestDetails() {
//		LaboratoryOrderTestDetails laboratoryOrderTestDetails = new LaboratoryOrderTestDetails();
//		laboratoryOrderTestDetails.setExclusionList("exclusion");
//		laboratoryOrderTestDetails.setProductName("Juno Early Fetal Sex Test");
//		laboratoryOrderTestDetails.setInclusionList("inclusions");
//		return laboratoryOrderTestDetails;
//
//	}

	public static ProductConfiguration mockProductConfiguration() {
		ProductConfiguration productConfiguration = new ProductConfiguration();
		productConfiguration.setA1(ProductConfigurationType.GENDER_FANFARE);
		productConfiguration.setA2(ProductConfigurationType.GENDER_TERMS);
		productConfiguration.setA3(ProductConfigurationType.INCLUDE_FETAL_SEX);
		productConfiguration.setA4(ProductConfigurationType.WITH_INSURANCE);
		productConfiguration.setA5(ProductConfigurationType.GENDER_TERMS);
		productConfiguration.setA6(ProductConfigurationType.GENDER_FANFARE);
		productConfiguration.setA7(ProductConfigurationType.GENDER_FANFARE);
		productConfiguration.setId(1L);
		productConfiguration.setProduct(mockProduct());
		return productConfiguration;
	}

	public static Product mockProductcreate() {
		Product product = new Product();
		// product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductLabProviders() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		// laboratoryProviders.add(mockLaboratory());
		// product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductNIPS_PLUS() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductADVANCED() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_ADVANCED);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductNIPS() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_ADVANCED);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductNIPS_ADVANCED() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(false);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_ADVANCED);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductEmptyLims() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId(null);
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductEmptyLabProvider() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		// laboratoryProviders.add(mockLaboratory());
		// product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductEmptyLabProviders() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		// laboratoryProviders.add(mockLaboratory());
		// product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductlimsOrder() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(true);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static Product mockProductRequiresProviderApproval() {
		Product product = new Product();
		product.setId("786518f5-4fa9-4576-a173-6318556ccb0b");
		product.setName("Juno Early Fetal Sex Test");
		product.setLongDescription("Fetal Sex Testing");
		product.setShortDescription("Fetal Sex Testing");
		product.setType(ProductType.TEST);
		product.setActive(true);
		product.setShippable(true);
		product.setTaxable(true);
		product.setReportConfiguration(ReportConfiguration.FST);
		product.setRequiresProviderApproval(false);
		product.setDimensions(mockProductDimensions());
		product.setPrice(99.0f);
		product.setCurrency(Currency.getInstance("USD"));
		// fulfillmentProviders.add(mockFulfillmentProvider());
		product.setFulfillmentProviders(fulfillmentProviders);
		laboratoryProviders.add(mockLaboratory());
		product.setLaboratoryProviders(laboratoryProviders);
		product.setXifinTestId("BSX-FST-0001");
		product.setStripeProductId(null);
		product.setCardConnectProductId(null);
		product.setSalesforceProductId("01t03000003CWt6AAG");
		product.setSalesforcePriceBookId("01s030000002ZCRAA2");
		product.setSalesforcePriceBookEntryId("01u03000007wW69AAE");
		product.setAllowsAssistedCollectionVideoCall(true);
		product.setAllowsSelfCollectedVideoUpload(true);
		product.setResultsConfigurationTemplate(ResultsConfigurationTemplate.FETAL_SEX);
		product.setReportConfiguration(ReportConfiguration.NIPS_BASIC);
		product.setLimsReportId("78788");
		product.setSku("KIT238349");
		product.setSalesforcePriceBookEntryId(null);
		product.setAlliedPackageUnitId(null);
		product.setAvailablity(null);
		return product;
	}

	public static InventoryItem mockInventoryItem() {
		InventoryItem inventoryItem = new InventoryItem();
		inventoryItem.setAvailable(true);
		inventoryItem.setAvailableUnits(1L);
		inventoryItem.setFirstCreated(Calendar.getInstance());
		inventoryItem.setId("3L");
		inventoryItem.setLastUpdated(Calendar.getInstance());
		inventoryItem.setMeta(DataBuilder.getMockMeta());
		inventoryItem.setProduct(mockProduct());
		inventoryItem.setReleased(true);
		return inventoryItem;
	}

	public static InventoryItem mockInventoryItemAvailableUnitss() {
		InventoryItem inventoryItem = new InventoryItem();
		inventoryItem.setAvailable(true);
		inventoryItem.setAvailableUnits(22);
		inventoryItem.setFirstCreated(Calendar.getInstance());
		inventoryItem.setId("3L");
		inventoryItem.setLastUpdated(Calendar.getInstance());
		inventoryItem.setMeta(DataBuilder.getMockMeta());
		inventoryItem.setProduct(mockProduct());
		inventoryItem.setReleased(true);
		return inventoryItem;
	}

	public static InventoryItem mockInventoryItemAvailable() {
		InventoryItem inventoryItem = new InventoryItem();
		inventoryItem.setAvailable(true);
		inventoryItem.setAvailableUnits(2);
		inventoryItem.setFirstCreated(Calendar.getInstance());
		inventoryItem.setId("3L");
		inventoryItem.setLastUpdated(Calendar.getInstance());
		inventoryItem.setMeta(DataBuilder.getMockMeta());
		inventoryItem.setProduct(mockProduct());
		inventoryItem.setReleased(true);
		return inventoryItem;
	}

	public static InventoryItem mockInventoryItems() {
		InventoryItem inventoryItem = new InventoryItem();
		inventoryItem.setProduct(mockProduct());
		inventoryItem.setAvailable(true);
		inventoryItem.setAvailableUnits(1L);
		inventoryItem.setFirstCreated(Calendar.getInstance());
		inventoryItem.setId("3L");
		inventoryItem.setLastUpdated(Calendar.getInstance());
		inventoryItem.setMeta(DataBuilder.getMockMeta());
		inventoryItem.setProduct(mockProduct());
		inventoryItem.setReleased(true);
		return inventoryItem;
	}

	public static InventoryItem mockInventoryItemUnits() {
		InventoryItem inventoryItem = new InventoryItem();
		inventoryItem.setAvailable(true);
		inventoryItem.setAvailableUnits(0);
		inventoryItem.setFirstCreated(Calendar.getInstance());
		inventoryItem.setId("3L");
		inventoryItem.setLastUpdated(Calendar.getInstance());
		inventoryItem.setMeta(DataBuilder.getMockMeta());
		inventoryItem.setProduct(mockProduct());
		inventoryItem.setReleased(true);
		return inventoryItem;
	}

	public static InventoryItem mockInventoryItemAvailableUnits() {
		InventoryItem inventoryItem = new InventoryItem();
		inventoryItem.setAvailable(true);
		inventoryItem.setAvailableUnits(0);
		inventoryItem.setFirstCreated(Calendar.getInstance());
		inventoryItem.setId("3L");
		inventoryItem.setLastUpdated(Calendar.getInstance());
		inventoryItem.setMeta(DataBuilder.getMockMeta());
		inventoryItem.setProduct(mockProduct());
		inventoryItem.setReleased(true);
		return inventoryItem;
	}

	public static ElementsClinic mockElementsClinic() {
		ElementsClinic elementsClinic = new ElementsClinic();
		elementsClinic.setContactFirstName("Juno_test");
		elementsClinic.setContactLastName("User");
		elementsClinic.setEmail("no-email@junodx.com");
		elementsClinic.setId(1);
		elementsClinic.setName("General_test_user");
		elementsClinic.setPhone("3334441212");
		elementsClinic.setReportEmails("no-email@junodx.com");
		elementsClinic.setWebsite("www.google.com");
		elementsClinic.setReportFaxNumber("1234543");
		elementsClinic.setPdfPassword("Password$123");
		elementsClinic.setFax("fax");
		elementsClinic.setPracticeDirector("director");
		elementsClinic.setHostCode("87656");
		elementsClinic.setGeneticCounselor(false);
		return elementsClinic;
	}

	public static ElementsPractitioner mockElementsPractitioner() {
		ElementsPractitioner practitioner = new ElementsPractitioner();
		practitioner.setId("78788");
		practitioner.setAddress1("Dharpally");
		practitioner.setAddress2("Nizamabad");
		practitioner.setCity("Hyderabad");
		practitioner.setCountry("CA");
		practitioner.setState("Telanagana");
		practitioner.setZip("503165");
		practitioner.setLastName("User");
		practitioner.setFirstName("Juno_test");
		practitioner.setEmail("no-email@junodx.com");
		practitioner.setNpi("234234324");
		practitioner.setExternalId("5L");
		practitioner.setTitle("Dev");
		practitioner.setPhone("3334441212");
		return practitioner;

	}

	public static ElementsLocation mockElementsLocation() {
		ElementsLocation patientLocation = new ElementsLocation();
		patientLocation.setAddressOne("Dharpally");
		patientLocation.setAddressTwo("Nizamabad");
		patientLocation.setCity("Hyderabad");
		patientLocation.setState("Telanagana");
		patientLocation.setZip("503165");
		patientLocation.setCountry("CA");
		return patientLocation;

	}

	public static ElementsReport[] reports = {};
	public static ElementsKit[] kits = {};
	public static String[] ethnicities = {};

	public static ElementsPatient mockElementsPatient() {
		ElementsPatient patient = new ElementsPatient();
		patient.setId(2);
		patient.setExternalId("5L");
		patient.setFirstName("Juno_test");
		patient.setLastName("User");
		patient.setDeceased(false);
		patient.setEmail("no-email@junodx.com");
		patient.setEthnicities(ethnicities);
		patient.setBirthDate("1997-15-12");
		patient.setGender("Female");
		patient.setKits(kits);
		patient.setLocation(mockElementsLocation());
		patient.setPhone("3334441212");
		patient.setReports(reports);
		// patient.setBirthDateInternal(Date.from(Instant.now()));
		patient.setStatus("status");
		patient.setMedicalRecordNumber("245");
		return patient;
	}

	public static ElementsKit mockElementsKit() {
		ElementsKit elementskit = new ElementsKit();
		elementskit.setId(3);
		elementskit.setCollectionDate(Calendar.getInstance());
		elementskit.setCollectionType(CollectionType.Blood);
		elementskit.setCreateShipment(true);
		elementskit.setExternalId("5L");
		elementskit.setTrackingNumber("345678");
		elementskit.setBarcode("24698");
		elementskit.setExternalBarcode("24566");
		return elementskit;
	}

	public static ElementsReport mockElementsReport() {
		ElementsReport elementsreport = new ElementsReport();
		elementsreport.setId(4);
		elementsreport.setExternalId("5L");
		elementsreport.setKitExtBarcode("24698");
		elementsreport.setReportTypeId("78788");
		elementsreport.setStatus("cancelled");
		// elementsreport.setAvailablePanelId("86766");
		return elementsreport;
	}

	public static List<String> consents = new ArrayList<>();

	public static ElementsShipment mockElementsShipment() {
		ElementsShipment shipment = new ElementsShipment();
		shipment.setLocation(mockElementsLocation());
		shipment.setId("8L");
		return shipment;
	}

	public static ElementsOrder mockElementsOrder() {

		ElementsOrder elementsOrder = new ElementsOrder();
		elementsOrder.setClinic(mockElementsClinic());
		elementsOrder.setConsents(consents);
		elementsOrder.setKit(mockElementsKit());
		elementsOrder.setPatient(mockElementsPatient());
		elementsOrder.setPatientLocation(mockElementsLocation());
		elementsOrder.setPractitioner(mockElementsPractitioner());
		elementsOrder.setReport(mockElementsReport());
		elementsOrder.setShipment(mockElementsShipment());
		return elementsOrder;
	}

	public static ActivationPayload mockActivationPayload() {
		ActivationPayload activationPayload = new ActivationPayload();
		activationPayload.setKitCode("JO135wwa33jj789");
		activationPayload.setDob("1997-12-15");
		activationPayload.setLastName("User");
		return activationPayload;
	}

	public static ActivationPayload mockActivationPayloadCode() {
		ActivationPayload activationPayload = new ActivationPayload();
		activationPayload.setKitCode("");
		activationPayload.setDob("1997-12-15");
		activationPayload.setLastName("User");
		return activationPayload;
	}

	public static ActivationPayload mockActivationPayloadlastname() {
		ActivationPayload activationPayload = new ActivationPayload();
		activationPayload.setKitCode("JO135wwa33jj789");
		activationPayload.setDob("1997-12-15");
		activationPayload.setLastName("");
		return activationPayload;
	}

	public static ActivationPayload mockActivationPayloadEmail() {
		ActivationPayload activationPayload = new ActivationPayload();
		activationPayload.setKitCode("JO135wwa33jj789");
		activationPayload.setDob("1997-12-15");
		activationPayload.setLastName("User");
		activationPayload.setEmail("no-email@gmail.com");
		return activationPayload;
	}

	public static ActivationPayload mockActivationPayloadKitCode() {
		ActivationPayload activationPayload = new ActivationPayload();
		activationPayload.setKitCode(null);
		activationPayload.setDob("1997-12-15");
		activationPayload.setLastName("User");
		return activationPayload;
	}

	public static ActivationPayload mockActivationPayloadLastName() {
		ActivationPayload activationPayload = new ActivationPayload();
		activationPayload.setKitCode("JO135wwa33jj789");
		activationPayload.setDob("1997-12-15");
		activationPayload.setLastName(null);
		return activationPayload;
	}

	public static ActivationResponsePayload mockActivationResponsePayload() {
		ActivationResponsePayload activationResponsePayload = new ActivationResponsePayload();
		activationResponsePayload.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		activationResponsePayload.setCustomerActivated(true);
		activationResponsePayload.setCustomerEmail("no-email@junodx.com");
		activationResponsePayload.setCustomerFirstName("Juno_test");
		activationResponsePayload.setCustomerLastName("User");
		// activationResponsePayload.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		activationResponsePayload.setFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		activationResponsePayload.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		activationResponsePayload.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		activationResponsePayload.setProductName("Juno Early Fetal Sex Test");
		return activationResponsePayload;
	}

	public static List<GrantedAuthority> authorities = mockUser().getAuthorities().stream()
			.map(role -> new SimpleGrantedAuthority(role.getName())).collect(Collectors.toList());
	public static UserDetailsImpl userDetailsImpl = (UserDetailsImpl) new UserDetailsImpl(1L, "General_test_user",
			"no-email@junodx.com", "12345", "Password&123", "123456", authorities);

	public static UserDetailsImpl userDetailsImplLicenses = (UserDetailsImpl) new UserDetailsImpl(1L,
			"General_test_user", "no-email@junodx.com", "b1ee000c-f947-46d9-b3df-e5f53cae34b3", "Password&123",
			"123456", authorities);

	public static List<OrderLineItemBatchDto> OrderLineItemBatchDtolineItems = new ArrayList<>();

	public static OrderBatchDto MockOrderBatchDto() {
		OrderBatchDto orderBatchDto = new OrderBatchDto();
		orderBatchDto.setAmount(349.9f);
		orderBatchDto.setSubTotal(349.9f);
		orderBatchDto.setTotalShipping(5.99f);
		orderBatchDto.setTotalTax(0.0f);
		orderBatchDto.setCurrency(Currency.getInstance("USD"));
		orderBatchDto.setRequiresShipping(false);
		orderBatchDto.setWithInsurance(false);
		orderBatchDto.setResultsAvailable(false);
		orderBatchDto.setCustomer(mockUserOrderDto());
		orderBatchDto.setCurrentStatus(OrderStatusType.CREATED);
		// orderBatchDto.setLineItems(OrderLineItemBatchDtolineItems);
		return orderBatchDto;
	}

	public static OrderUpdateRequest mockOrderUpdateRequest() {
		OrderUpdateRequest orderUpdateRequest = new OrderUpdateRequest();
		orderUpdateRequest.setAction(OrderUpdateActions.UPDATE_CUSTOMER);
		orderUpdateRequest.setNewStatus(OrderStatusType.CREATED);
		orderUpdateRequest.setOrder(mockOrder());
		return orderUpdateRequest;

	}

	public static OrderUpdateRequest mockOrderUpdateRequestException() {
		OrderUpdateRequest orderUpdateRequest = new OrderUpdateRequest();
		orderUpdateRequest.setAction(OrderUpdateActions.UPDATE_CUSTOMER);
		// orderUpdateRequest.setNewStatus(OrderStatusType.CLOSED);
		orderUpdateRequest.setOrder(mockOrder());
		return orderUpdateRequest;

	}

	public static OrderUpdateRequest mockOrderUpdateRequests() {
		OrderUpdateRequest orderUpdateRequest = new OrderUpdateRequest();
		orderUpdateRequest.setAction(OrderUpdateActions.UPDATE_LAB);
		orderUpdateRequest.setNewStatus(OrderStatusType.CREATED);
		orderUpdateRequest.setOrder(mockOrder());
		return orderUpdateRequest;

	}

	public static OrderUpdateRequest mockOrderUpdateRequestShipping() {
		OrderUpdateRequest orderUpdateRequest = new OrderUpdateRequest();
		orderUpdateRequest.setAction(OrderUpdateActions.UPDATE_SHIPPING);
		orderUpdateRequest.setNewStatus(OrderStatusType.CREATED);
		orderUpdateRequest.setOrder(mockOrder());
		return orderUpdateRequest;

	}

	public static OrderUpdateRequest mockOrderUpdateRequestAction() {
		OrderUpdateRequest orderUpdateRequest = new OrderUpdateRequest();
		// orderUpdateRequest.setAction(OrderUpdateActions.UPDATE_CUSTOMER);
		orderUpdateRequest.setNewStatus(OrderStatusType.CREATED);
		orderUpdateRequest.setOrder(mockOrder());
		return orderUpdateRequest;

	}

	public static OrderUpdateRequest mockOrderUpdateRequestOrders() {
		OrderUpdateRequest orderUpdateRequest = new OrderUpdateRequest();
		orderUpdateRequest.setAction(OrderUpdateActions.UPDATE_CUSTOMER);
		orderUpdateRequest.setNewStatus(OrderStatusType.CREATED);
		// orderUpdateRequest.setOrder(mockOrder());
		return orderUpdateRequest;

	}

	public static OrderKitAssignPayload mockOrderKitAssignPayload() {
		OrderKitAssignPayload orderKitAssignPayload = new OrderKitAssignPayload();
		orderKitAssignPayload.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		orderKitAssignPayload.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderKitAssignPayload.setKit(mockKit());
		orderKitAssignPayload.setFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		return orderKitAssignPayload;

	}

	public static RedrawRequestPayload mockRedrawRequestPayload() {

		RedrawRequestPayload redrawRequestPayload = new RedrawRequestPayload();
		redrawRequestPayload.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		redrawRequestPayload.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		redrawRequestPayload.setTestRunId("1L");
		// redrawRequestPayload.setCreate(true);
		redrawRequestPayload.setApproved(false);
		return redrawRequestPayload;

	}

	public static RefundRequestPayload mockRefundRequestPayload() {
		RefundRequestPayload refundRequestPayload = new RefundRequestPayload();
		refundRequestPayload.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		refundRequestPayload.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		refundRequestPayload.setCreate(true);
		refundRequestPayload.setApproved(false);
		return refundRequestPayload;

	}

	public static OrderShipmentPayload mockOrderShipmentPayload() {
		OrderShipmentPayload orderShipmentPayload = new OrderShipmentPayload();
		orderShipmentPayload.setFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderShipmentPayload.setGetReturnOptions(false);
		orderShipmentPayload.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		orderShipmentPayload.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		orderShipmentPayload.setReturnShipment(false);
		return orderShipmentPayload;
	}

	public static OrderShipmentPayload mockOrderShipmentPayloadLineItemId() {
		OrderShipmentPayload orderShipmentPayload = new OrderShipmentPayload();
		orderShipmentPayload.setFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		orderShipmentPayload.setGetReturnOptions(false);
		orderShipmentPayload.setLineItemId(null);
		orderShipmentPayload.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		orderShipmentPayload.setReturnShipment(false);
		return orderShipmentPayload;
	}

	public static ShippoShipmentPayload mockShippoShipmentPayload() {
		ShippoShipmentPayload shippoShipmentPayload = new ShippoShipmentPayload();
		shippoShipmentPayload.setAddressFrom(mockShippoAddressForm());
		shippoShipmentPayload.setAddressReturn(mockShippoAddressForm());
		shippoShipmentPayload.setAddressTo(mockShippoAddressForm());
		shippoShipmentPayload.setAsync(false);
		shippoShipmentPayload.setExtra(mockShippoExtraMap());
		return shippoShipmentPayload;
	}

	public static ShippoExtraMap mockShippoExtraMap() {
		ShippoExtraMap shippoExtraMap = new ShippoExtraMap();
		shippoExtraMap.setReturn(false);
		return shippoExtraMap;

	}

	public static ShippoStatusPayload mockShippoStatusPayload() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatas());
		return shippoStatusPayload;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadgetTracking() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatasgetTracking());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatasgetTracking() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatus());
		return shippoStatusData;
	}

	public static ShippoStatusData mockShippoStatusDatas() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatus());
		return shippoStatusData;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadContact_Carrier() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDataContact_Carrier());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDataContact_Carrier() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusContact_Carrier());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusContact_Carrier() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusContact_Carrier());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusContact_Carrier() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.contact_carrier);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloaddelayed() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatadelayed());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatadelayed() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusdelayed());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusdelayed() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusdelayed());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusdelayed() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.delayed);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloaddelivery_attempted() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatadelivery_attempted());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatadelivery_attempted() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusdelivery_attempted());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusdelivery_attempted() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusdelivery_attempted());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusdelivery_attempted() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.delivery_attempted);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloaddelivery_rescheduled() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatadelivery_rescheduled());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatadelivery_rescheduled() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusdelivery_rescheduled());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusdelivery_rescheduled() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusdelivery_rescheduled());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusdelivery_rescheduled() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.delivery_rescheduled);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloaddelivery_scheduled() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatadelivery_scheduled());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatadelivery_scheduled() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusdelivery_scheduled());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusdelivery_scheduled() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusdelivery_scheduled());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusdelivery_scheduled() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.delivery_scheduled);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadlocation_inaccessible() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatalocation_inaccessible());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatalocation_inaccessible() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuslocation_inaccessible());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuslocation_inaccessible() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuslocation_inaccessible());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuslocation_inaccessible() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.location_inaccessible);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadnotice_left() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatanotice_left());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatanotice_left() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusnotice_left());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusnotice_left() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusnotice_left());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusnotice_left() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.notice_left);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadpackage_arrived() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatapackage_arrived());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatapackage_arrived() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuspackage_arrived());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuspackage_arrived() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuspackage_arrived());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuspackage_arrived() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.package_arrived);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadpackage_damaged() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatapackage_damaged());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatapackage_damaged() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuspackage_damaged());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuspackage_damaged() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuspackage_damaged());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuspackage_damaged() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.package_damaged);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadreschedule_delivery() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatareschedule_delivery());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatareschedule_delivery() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusreschedule_delivery());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusreschedule_delivery() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusreschedule_delivery());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusreschedule_delivery() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.reschedule_delivery);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadpickup_available() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatapickup_available());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatapickup_available() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuspickup_available());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuspickup_available() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuspickup_available());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuspickup_available() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.pickup_available);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadpackage_held() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatapackage_held());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatapackage_held() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuspackage_held());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuspackage_held() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuspackage_held());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuspackage_held() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.package_held);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadpackage_processed() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatapackage_processed());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatapackage_processed() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuspackage_processed());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuspackage_processed() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuspackage_processed());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuspackage_processed() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.package_processed);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static CancelFulfillmentPayload mockCancelFulfillmentPayload() {
		CancelFulfillmentPayload cancelFulfillmentPayload = new CancelFulfillmentPayload();
		cancelFulfillmentPayload.setCancelledFulfillmentId("8fdf6101-f19a-4154-a36f-521528d026545");
		cancelFulfillmentPayload.setNewFulfillmentCreated(true);
		cancelFulfillmentPayload.setNewFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		cancelFulfillmentPayload.setSuccess(true);
		return cancelFulfillmentPayload;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadpackage_processing() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatapackage_processing());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatapackage_processing() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuspackage_processing());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuspackage_processing() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuspackage_processing());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuspackage_processing() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.package_processing);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadpackage_departed() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatapackage_departed());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatapackage_departed() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuspackage_departed());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuspackage_departed() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuspackage_departed());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuspackage_departed() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.package_departed);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadpackage_forwarded() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDatapackage_forwarded());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDatapackage_forwarded() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatuspackage_forwarded());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatuspackage_forwarded() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatuspackage_forwarded());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadDelieved() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDataDelieved());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDataDelieved() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusDelieved());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusDelieved() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatus());
		shippoTrackingStatus.setStatus(ShippoStatus.DELIVERED);
		return shippoTrackingStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadReturned() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDataReturned());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDataReturned() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusReturned());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusReturned() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatus());
		shippoTrackingStatus.setStatus(ShippoStatus.RETURNED);
		return shippoTrackingStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadPreTransit() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDataPreTransit());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDataPreTransit() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusPreTransit());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusPreTransit() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatus());
		shippoTrackingStatus.setStatus(ShippoStatus.PRE_TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatuspackage_forwarded() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.package_forwarded);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadout_for_delivery() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDataout_for_delivery());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDataout_for_delivery() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusout_for_delivery());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusout_for_delivery() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusout_for_delivery());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusout_for_delivery() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.out_for_delivery);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusPayload mockShippoStatusPayloadPackage_Accepted() {
		ShippoStatusPayload shippoStatusPayload = new ShippoStatusPayload();
		shippoStatusPayload.setCarrier("carrier");
		shippoStatusPayload.setEvent("event");
		shippoStatusPayload.setTest(false);
		shippoStatusPayload.setData(mockShippoStatusDataPackage_Accepted());
		return shippoStatusPayload;
	}

	public static ShippoStatusData mockShippoStatusDataPackage_Accepted() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		// shippoStatusData.setCarrier("carrier");
		// shippoStatusData.setEta(Calendar.getInstance());
		// shippoStatusData.setMessages(ethnicities);
		// shippoStatusData.setMetadata("meta");
		// shippoStatusData.setOriginalEta(Calendar.getInstance());
		// shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatusPackage_Accepted());
		return shippoStatusData;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatusPackage_Accepted() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatusPackage_Accepted());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatusPackage_Accepted() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.package_accepted);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusData mockShippoStatusData() {
		ShippoStatusData shippoStatusData = new ShippoStatusData();
		shippoStatusData.setAddressFrom(mockShippoStatusAddressForm());
		shippoStatusData.setAddressTo(mockShippoStatusAddressForm());
		shippoStatusData.setCarrier("carrier");
		shippoStatusData.setEta(Calendar.getInstance());
		shippoStatusData.setMessages(ethnicities);
		shippoStatusData.setMetadata("meta");
		shippoStatusData.setOriginalEta(Calendar.getInstance());
		shippoStatusData.setServiceLevel(mockShippoStatusServiceLevel());
		shippoStatusData.setTest(false);
		shippoStatusData.setTrackingNumber("12345");
		shippoStatusData.setTransaction("Transaction");
		shippoStatusData.setTrackingStatus(mockShippoTrackingStatus());
		return shippoStatusData;
	}

	public static UpdateCustomerToAddress mockUpdateCustomerToAddress() {
		UpdateCustomerToAddress updateCustomerToAddress = new UpdateCustomerToAddress();
		updateCustomerToAddress.setFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		updateCustomerToAddress.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		updateCustomerToAddress.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		updateCustomerToAddress.setName("juno");
		updateCustomerToAddress.setPhone(DataBuilder.getMockPhone());
		updateCustomerToAddress.setToAddress(getMockAddress());
		return updateCustomerToAddress;

	}

	public static ShippoCreateLabelRequest mockShippoCreateLabelRequest() {
		ShippoCreateLabelRequest shippoCreateLabelRequest = new ShippoCreateLabelRequest();
		shippoCreateLabelRequest.setAddressFrom(mockShippoAddressForm());
		shippoCreateLabelRequest.setAddressReturn(mockShippoAddressForm());
		shippoCreateLabelRequest.setAddressTo(mockShippoAddressForm());
		shippoCreateLabelRequest.setAmount(1f);
		shippoCreateLabelRequest.setAsync(false);
		shippoCreateLabelRequest.setIncludeReturnLabel(false);
		shippoCreateLabelRequest.setCarrierReturn("carrier");
		shippoCreateLabelRequest.setCarrierTo("Carrier");
		shippoCreateLabelRequest.setCurrency("USD");
		shippoCreateLabelRequest.setFromAddress(mockShippoAddressForm());
		shippoCreateLabelRequest.setFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		shippoCreateLabelRequest.setLineItemId("845dba6b-4c0f-4cc9-ba77-62e7216bd692");
		shippoCreateLabelRequest.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		shippoCreateLabelRequest.setTypeReturn(ShippingDeliveryType.FIRST_CLASS);
		return shippoCreateLabelRequest;
	}

	public static ShippoCreateLabelRequest mockShippoCreateLabelRequestLineItemId() {
		ShippoCreateLabelRequest shippoCreateLabelRequest = new ShippoCreateLabelRequest();
		shippoCreateLabelRequest.setAddressFrom(mockShippoAddressForm());
		shippoCreateLabelRequest.setAddressReturn(mockShippoAddressForm());
		shippoCreateLabelRequest.setAddressTo(mockShippoAddressForm());
		shippoCreateLabelRequest.setAmount(1f);
		shippoCreateLabelRequest.setAsync(false);
		shippoCreateLabelRequest.setIncludeReturnLabel(false);
		shippoCreateLabelRequest.setCarrierReturn("carrier");
		shippoCreateLabelRequest.setCarrierTo("Carrier");
		shippoCreateLabelRequest.setCurrency("USD");
		shippoCreateLabelRequest.setFromAddress(mockShippoAddressForm());
		shippoCreateLabelRequest.setFulfillmentId("8fdf6101-f19a-4154-a36f-521528d02654");
		shippoCreateLabelRequest.setLineItemId(null);
		shippoCreateLabelRequest.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		shippoCreateLabelRequest.setTypeReturn(ShippingDeliveryType.FIRST_CLASS);
		return shippoCreateLabelRequest;
	}

	public static ShippoTrackingStatus mockShippoTrackingStatus() {
		ShippoTrackingStatus shippoTrackingStatus = new ShippoTrackingStatus();
		shippoTrackingStatus.setLocation(mockShippoStatusAddressForm());
//		shippoTrackingStatus.setObjectCreated(Calendar.getInstance());
		shippoTrackingStatus.setObjectId("1L");
//		shippoTrackingStatus.setObjectUpdated(Calendar.getInstance());
//		shippoTrackingStatus.setStatusDate(Calendar.getInstance());
		shippoTrackingStatus.setStatusDetails("");
		shippoTrackingStatus.setSubStatus(mockShippoSubStatus());
		shippoTrackingStatus.setStatus(ShippoStatus.TRANSIT);
		return shippoTrackingStatus;
	}

	public static ShippoSubStatus mockShippoSubStatus() {
		ShippoSubStatus shippoSubStatus = new ShippoSubStatus();
		shippoSubStatus.setActionRequired(false);
		shippoSubStatus.setCode(ShippoSubStatusType.address_issue);
		shippoSubStatus.setText("text");
		return shippoSubStatus;
	}

	public static ShippoStatusServiceLevel mockShippoStatusServiceLevel() {
		ShippoStatusServiceLevel ShippoStatusServiceLevel = new ShippoStatusServiceLevel();
		ShippoStatusServiceLevel.setName("Juno Headquarters");
		ShippoStatusServiceLevel.setToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		return ShippoStatusServiceLevel;
	}

	public static ShippoStatusAddressForm mockShippoStatusAddressForm() {
		ShippoStatusAddressForm shippoStatusAddressForm = new ShippoStatusAddressForm();
		shippoStatusAddressForm.setCity("San Diego");
		shippoStatusAddressForm.setCountry("United States");
		shippoStatusAddressForm.setState("CA");
		shippoStatusAddressForm.setZip("98077");
		return shippoStatusAddressForm;
	}

	public static ShippoAddressForm mockShippoAddressForm() {
		ShippoAddressForm shippoAddressForm = new ShippoAddressForm();
		shippoAddressForm.setCity("San Diego");
		shippoAddressForm.setCountry("United States");
		shippoAddressForm.setEmail("no-email@junodx.com");
		shippoAddressForm.setMetadata(null);
		shippoAddressForm.setName("Juno Headquarters");
		shippoAddressForm.setPhone("809097798");
		shippoAddressForm.setState("CA");
		shippoAddressForm.setStreet1("11511 Sorrento Valley Rd");
		shippoAddressForm.setStreet2("11511 Sorrento Valley Rd");
		shippoAddressForm.setZip("98077");
//		Map<String, Object> paramsC = new HashMap<>();
//		com.shippo.model.Address addr = com.shippo.model.Address.create(paramsC);
//		addr.setState(shippoAddressForm.getState());
//		addr.setCity(shippoAddressForm.getCity());
//		addr.setCompany(shippoAddressForm.get());
		return shippoAddressForm;
	}

	public static LabReceiptPayload mockLabReceiptPayload() {
		LabReceiptPayload labReceiptPayload = new LabReceiptPayload();
		labReceiptPayload.setKit(mockKit());
		return labReceiptPayload;

	}

	public static TestReportsReviewResultsDto mockTestReportsReviewResultsDto() {
		TestReportsReviewResultsDto resultsDto = new TestReportsReviewResultsDto();
		resultsDto.setId(2L);
		resultsDto.setRecentlyAutomaticallySignedOut(1);
		resultsDto.setRecentlyManuallySignedOut(1);
		resultsDto.setRecentlySignedOut(1);
		resultsDto.setResultsAwaitingInvestigation(1);
		resultsDto.setRunsToBeApproved(1);
		resultsDto.setUpcomingResults(1);
		return resultsDto;
	}

	public static TestReportsAwaitingReviewDto mockTestReportsAwaitingReviewDto() {
		TestReportsAwaitingReviewDto reviewDto = new TestReportsAwaitingReviewDto();
		reviewDto.setReportConfiguration(ReportConfiguration.FST);
		reviewDto.setTotalAwaitingReview(1);
		reviewDto.setTotalRequiringAutomaticReview(1);
		reviewDto.setTotalRequiringManualReview(1);
		return reviewDto;
	}

	public static List<TestReportsAwaitingReviewDto> counts = new ArrayList<>();

	public static LaboratoryReviewStatisticsDto mockLaboratoryReviewStatisticsDto() {
		LaboratoryReviewStatisticsDto statsGroup = new LaboratoryReviewStatisticsDto();
		statsGroup.setLaboratoryId("f450237e-20a3-4bf1-b64d-9ecaab16be7a");
		statsGroup.setReview(counts);
		return statsGroup;
	}

	public static List<TestReport> testReports = new ArrayList<>();
	public static List<TestReport> testReportss = new ArrayList<>();

	public static List<TestReport> testReportEmpty = new ArrayList<>();

	public static TestReport mockTestReportEmpty() {
		TestReport report = new TestReport();
		report.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		report.setResultData(mockReport());
		return report;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequest() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.APPROVE);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReportEmpty);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequests() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.APPROVE);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestWithoutTestReport() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.APPROVE);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		// statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestWithoutTestReports() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.APPROVE);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReportss);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestWithoutTestReportAction() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		// statsGroup.setAction(TestReportUpdateActions.APPROVE);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestSignout() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.SIGNOUT);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestss() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.CREATE);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequesttPipe() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.CREATE);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		// statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestCreateAction() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.CREATE);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		// statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestsss() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.RETEST);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestRetestException() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.RETEST);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		// statsGroup.setReTestType(RetestActionType.REDRAW);
		statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportUpdateRequest mockTestReportUpdateRequestRetestExceptions() {
		TestReportUpdateRequest statsGroup = new TestReportUpdateRequest();
		statsGroup.setAction(TestReportUpdateActions.RETEST);
		statsGroup.setName("Juno_test");
		statsGroup.setNoResult(true);
		statsGroup.setNotes("notes");
		statsGroup.setPipelineRunId("12345");
		statsGroup.setReports(testReports);
		statsGroup.setReTestType(RetestActionType.REDRAW);
		// statsGroup.setUserId("1L");
		return statsGroup;
	}

	public static TestReportBatchDto mockTestReportBatchDto() {
		TestReportBatchDto testReportBatchDto = new TestReportBatchDto();
		testReportBatchDto.setAge(1);
		testReportBatchDto.setAvailable(false);
		testReportBatchDto.setCompletedAt(Calendar.getInstance());
		testReportBatchDto.setEstimatedToBeAvailableAt(Calendar.getInstance());
		testReportBatchDto.setId("2L");
		testReportBatchDto.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		testReportBatchDto.setOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		testReportBatchDto.setOrderNumber("1234");
		testReportBatchDto.setPatient(mockUserOrderDto());
		testReportBatchDto.setTestRunId("1L");
		testReportBatchDto.setSignedOutType(null);
		testReportBatchDto.setSignedOut(false);
		testReportBatchDto.setSampleNumber("123455");
		testReportBatchDto.setReportType(ReportType.STANDARD);
		testReportBatchDto.setReportConfiguration(ReportConfiguration.NIPS_PLUS);
		return testReportBatchDto;
	}

	public static UserOrderDto mockUserOrderDto() {
		UserOrderDto customer = new UserOrderDto();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setPrimaryAddress(DataBuilder.getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static LabOrderBatchDto mockLabOrderBatchDto() {
		LabOrderBatchDto labOrderBatchDto = new LabOrderBatchDto();
		labOrderBatchDto.setEstArrivalInLab(Calendar.getInstance());
		labOrderBatchDto.setId("1L");
		labOrderBatchDto.setParentOrderId("aa86f0ec-9ea1-487c-a814-b1c6001be7e8");
		labOrderBatchDto.setPatient(mockUserBatchDto());
		labOrderBatchDto.setReceivedAt(Calendar.getInstance());
		return labOrderBatchDto;
	}

	public static UserBatchDto mockUserBatchDto() {
		UserBatchDto userBatchDto = new UserBatchDto();
		userBatchDto.setAge(1);
		userBatchDto.setDateOfBirth("1997-12-15");
		userBatchDto.setEmail("no-email@junodx.com");
		userBatchDto.setFirstName("Juno_test");
		userBatchDto.setId("1L");
		userBatchDto.setLastName("User");
		userBatchDto.setLastOrderedAt(Calendar.getInstance());
		userBatchDto.setPatientDetails(mockPatientDetailsLabOrderDto());
		userBatchDto.setPhone(DataBuilder.getMockPhone());
		userBatchDto.setPrimaryAddress(getMockAddress());
		userBatchDto.setUserType(UserType.PROVIDER);
		return userBatchDto;
	}

	public static List<ProviderOrderDto> providers = new ArrayList<>();

	public static PatientDetailsLabOrderDto mockPatientDetailsLabOrderDto() {
		PatientDetailsLabOrderDto patientDetailsLabOrderDto = new PatientDetailsLabOrderDto();
		patientDetailsLabOrderDto.setAllowReleaseOfMedicalRecords(false);
		patientDetailsLabOrderDto.setMedicalDetails(mockMedicalDetailsLabOrderDto());
		patientDetailsLabOrderDto.setProviders(providers);
		return patientDetailsLabOrderDto;
	}

	public static MedicalDetailsLabOrderDto mockMedicalDetailsLabOrderDto() {
		MedicalDetailsLabOrderDto medicalDetailsLabOrderDto = new MedicalDetailsLabOrderDto();
		medicalDetailsLabOrderDto.setGestationalAge(1f);
		medicalDetailsLabOrderDto.setLmpDate(Calendar.getInstance());
		medicalDetailsLabOrderDto.setNoBloodTransfusion(false);
		medicalDetailsLabOrderDto.setNoOrganTransplant(false);
		medicalDetailsLabOrderDto.setNoOrganTransplant(false);
		medicalDetailsLabOrderDto.setNumberOfFetuses(1);
		medicalDetailsLabOrderDto.setPregnant(false);
		medicalDetailsLabOrderDto.setThreeOrMoreFetuses(false);
		return medicalDetailsLabOrderDto;
	}

	public static TestRunRemovalPayload mockTestRunRemovalPayload() {
		TestRunRemovalPayload testRunRemovalPayload = new TestRunRemovalPayload();
		testRunRemovalPayload.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		testRunRemovalPayload.setTestRunId("1L");
		return testRunRemovalPayload;
	}

	public static TestRunRemovalPayload mockTestRunRemovalPayloads() {
		TestRunRemovalPayload testRunRemovalPayload = new TestRunRemovalPayload();
		testRunRemovalPayload.setLaboratoryOrderId("76c97d43-347f-4132-ba18-ddf3b313c226");
		testRunRemovalPayload.setTestRunId(null);
		return testRunRemovalPayload;
	}

	public static CheckoutRequestPayload mockCheckoutRequestPayload() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCheckoutId("1L");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
		checkoutRequestPayload.setCheckoutToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
//		checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadToken() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setPromoCode("78yi1hkj");
		// checkoutRequestPayload.setCheckoutId("1L");
		checkoutRequestPayload.setCustomer(mockUserCheckouts());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
		checkoutRequestPayload.setCheckoutToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
//		checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadWithoutUsers() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setPromoCode("78yi1hkj");
		// checkoutRequestPayload.setCheckoutId("1L");
		checkoutRequestPayload.setCustomer(mockUserCheckoutWithoutUsers());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
		checkoutRequestPayload.setCheckoutToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
//		checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadWithoutUser() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		// checkoutRequestPayload.setPromoCode("78yi1hkj");
		// checkoutRequestPayload.setCheckoutId("1L");
		checkoutRequestPayload.setCustomer(mockUserCheckoutWithoutUsers());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
		checkoutRequestPayload.setCheckoutToken(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
//		checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockUserCheckoutWithoutUsers() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1998-12-15");
		customer.setEmail("no-emails@junodx.com");
		customer.setFirstName("Juno_tests");
		customer.setLastName("Users");
		customer.setPhone("33344412123434");
		customer.setShippingAddress(getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static Address getMockAddressWithoutUsers() {
		Address address = new Address();
		address.setCity("San Diegos");
		address.setCountry("United Statess");
		address.setName("Juno Headquarterss");
		address.setPostalCode("980778");
		address.setPrimaryAddress(true);
		address.setState("CAA");
		address.setStreet("11511 Sorrento Valley Rds");
		address.setPrimaryMailingAddress(true);
		return address;
	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadUserFound() throws StripeException {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("1889809");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
//		checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCreate() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCheckoutId("1L");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
//		checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadExcep() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		// checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		// checkoutRequestPayload.setClientId("12345");
		// checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		// checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		// checkoutRequestPayload.setItems(items);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		// checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		// checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		// checkoutRequestPayload.setTotalAmount(399.9f);
		// checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemsEmpty = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadItems() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemsEmpty);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemsss = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadItem() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemsss);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemWithoutProductId = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadWithoutProductId() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemWithoutProductId);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemssss = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadItemSold() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemssss);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.CARD_CONNECT);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static CheckoutLineItem mockCheckoutLineItemItems() throws StripeException {
		CheckoutLineItem checkoutLineItem = new CheckoutLineItem();
		checkoutLineItem.setAmount(99f);
		checkoutLineItem.setCheckout(mockCheckout());
		checkoutLineItem.setCurrency("USD");
		checkoutLineItem.setId("2L");
		// checkoutLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		checkoutLineItem.setQuantity(1);
		checkoutLineItem.setShipped(false);
		return checkoutLineItem;
	}

	public static CheckoutLineItem mockCheckoutLineItemItemEmptyProduct() throws StripeException {
		CheckoutLineItem checkoutLineItem = new CheckoutLineItem();
		checkoutLineItem.setAmount(99f);
		checkoutLineItem.setCheckout(mockCheckout());
		checkoutLineItem.setCurrency("USD");
		checkoutLineItem.setId("2L");
		// checkoutLineItem.setProductId("786518f5-4fa9-4576-a173-6318556ccb0b");
		checkoutLineItem.setQuantity(1);
		checkoutLineItem.setShipped(false);
		return checkoutLineItem;
	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCheckout() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemCheckout);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockUserCheckouts() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("15-12-1997");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("12345678");
		customer.setShippingAddress(DataBuilder.getMockAddress());
		customer.setStripeCustomerId("7709988");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static List<CheckoutLineItem> itemCheckout = new ArrayList<>();

	public static List<CheckoutLineItem> itemCustomerLastName = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCustomerLastName() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockUserCheckoutLastNames());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemCustomerLastName);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockUserCheckoutLastNames() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		// customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static List<CheckoutLineItem> itemCustomerDateOfBirth = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCustomerShippingAddress() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockUserCheckoutShippingAddress());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemCustomerDateOfBirth);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockUserCheckoutShippingAddress() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		// customer.setShippingAddress(DataBuilder.getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;

	}

	public static List<CheckoutLineItem> itemCustomerShippingAddress = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCustomerShipping() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomerShippingAddresss());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemCustomerShippingAddress);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockCustomerShippingAddresss() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static UserOrderDto mockCustomerShippingAddress() {
		UserOrderDto customer = new UserOrderDto();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		// customer.setShippingAddress(DataBuilder.getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static List<CheckoutLineItem> itemCustomerStripeCustomer = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCustomerStripeCustomer() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemCustomerStripeCustomer);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserOrderDto mockCustomerLastNames() {
		UserOrderDto customer = new UserOrderDto();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		// customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setPrimaryAddress(getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static List<CheckoutLineItem> itemCustomerDefaultProvider = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCustomerDefaultProvider() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemCustomerDefaultProvider);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemCustomerApprovingProvider = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCustomerApprovingProvider() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		// checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemCustomerApprovingProvider);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		// checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserOrderDto mockCustomerStripeCustomers() {
		UserOrderDto customer = new UserOrderDto();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setPrimaryAddress(getMockAddress());
		customer.setStripeCustomerId(null);
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static UserOrderDto mockCustomerStripeCustomer() {
		UserOrderDto customer = new UserOrderDto();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		// customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setPrimaryAddress(getMockAddress());
		customer.setStripeCustomerId(null);
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static List<CheckoutLineItem> itemCustomerFirstName = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadCustomerFirstName() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomerEmil());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemCustomerFirstName);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockCustomerEmil() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		// customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static List<CheckoutLineItem> itemFirstName = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadFirstName() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomerFirstName());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemFirstName);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockCustomerFirstName() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		// customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddressFirstName());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static Address getMockAddressFirstName() {
		Address address = new Address();
		address.setCity("San Diego");
		address.setCountry("United States");
		address.setName("Juno Headquarters");
		address.setPostalCode("98077");
		address.setPrimaryAddress(true);
		address.setState("CA");
		address.setStreet("11511 Sorrento Valley Rd");
		address.setPrimaryMailingAddress(true);
		return address;
	}

	public static List<CheckoutLineItem> itemLastName = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadLastName() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomerLastName());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemLastName);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockCustomerLastName() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		// customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(DataBuilder.getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static List<CheckoutLineItem> itemDateOfBirth = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadDateOfBirth() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomerDateOfBirth());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemDateOfBirth);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockCustomerDateOfBirth() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		// customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(DataBuilder.getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static List<CheckoutLineItem> itemEmail = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadEmail() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomerEmail());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemEmail);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemOverTenWeeks = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadOverTenWeeks() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemOverTenWeeks);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDtoOverTenWeeks());
		return checkoutRequestPayload;

	}

	public static MedicalDetailsOrderCreateDto mockMedicalDetailsOrderCreateDtoOverTenWeeks() {
		MedicalDetailsOrderCreateDto medicalDetailsOrderCreateDto = new MedicalDetailsOrderCreateDto();
		medicalDetailsOrderCreateDto.setAgreedToTerms(false);
		medicalDetailsOrderCreateDto.setConsented(false);
		// medicalDetailsOrderCreateDto.setLmpDate(Calendar.getInstance());
		medicalDetailsOrderCreateDto.setNoTransplantNorTransfusion(false);
		medicalDetailsOrderCreateDto.setOverTenWeeks(true);
		return medicalDetailsOrderCreateDto;

	}

	public static List<CheckoutLineItem> itemconceptionDate = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadconceptionDate() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemconceptionDate);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDtoconceptionDate());
		return checkoutRequestPayload;

	}

	public static MedicalDetailsOrderCreateDto mockMedicalDetailsOrderCreateDtoconceptionDate() {
		MedicalDetailsOrderCreateDto medicalDetailsOrderCreateDto = new MedicalDetailsOrderCreateDto();
		medicalDetailsOrderCreateDto.setAgreedToTerms(false);
		// medicalDetailsOrderCreateDto.setConsented(false);
		// medicalDetailsOrderCreateDto.setOverSevenWeeks(true);
		// medicalDetailsOrderCreateDto.setLmpDate(Calendar.getInstance());
		medicalDetailsOrderCreateDto.setNoTransplantNorTransfusion(false);
		// medicalDetailsOrderCreateDto.setOverTenWeeks(true);
		return medicalDetailsOrderCreateDto;

	}

	public static List<CheckoutLineItem> itemsetconceptionDate = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadsetconceptionDate() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemsetconceptionDate);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		// checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDtosetconceptionDate());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemOverSevenWeeks = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadOverSevenWeeks() throws StripeException {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomers());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemOverSevenWeeks);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDtoOverSevenWeeks());
		return checkoutRequestPayload;

	}

	public static MedicalDetailsOrderCreateDto mockMedicalDetailsOrderCreateDtoOverSevenWeeks() {
		MedicalDetailsOrderCreateDto medicalDetailsOrderCreateDto = new MedicalDetailsOrderCreateDto();
		medicalDetailsOrderCreateDto.setAgreedToTerms(false);
		medicalDetailsOrderCreateDto.setConsented(false);
		medicalDetailsOrderCreateDto.setOverSevenWeeks(true);
		// medicalDetailsOrderCreateDto.setLmpDate(Calendar.getInstance());
		medicalDetailsOrderCreateDto.setNoTransplantNorTransfusion(false);
		// medicalDetailsOrderCreateDto.setOverTenWeeks(true);
		return medicalDetailsOrderCreateDto;

	}

	public static UserCheckout mockCustomerEmail() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		// customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(DataBuilder.getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static List<CheckoutLineItem> itemAnonymous = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadAnonymous() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemAnonymous);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemClientId = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadClientId() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		// checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemClientId);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadException() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		// checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadExceptions() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		// checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomerException());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
//		checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDtoException());
		return checkoutRequestPayload;

	}

	public static List<CheckoutLineItem> itemsException = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloadExceptionItem() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		// checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomerItemException());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(itemsException);
//		checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDtoException());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockCustomerItemException() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddress());
		// customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static UserCheckout mockCustomerException() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		// customer.setDateOfBirth("1997-12-15");
		// customer.setEmail("no-email@junodx.com");
		// customer.setFirstName("Juno_test");
		// customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(getMockAddress());
		// customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static MedicalDetailsOrderCreateDto mockMedicalDetailsOrderCreateDtoException() {
		MedicalDetailsOrderCreateDto medicalDetailsOrderCreateDto = new MedicalDetailsOrderCreateDto();
		medicalDetailsOrderCreateDto.setAgreedToTerms(false);
		medicalDetailsOrderCreateDto.setConsented(false);
		// medicalDetailsOrderCreateDto.setLmpDate(Calendar.getInstance());
		medicalDetailsOrderCreateDto.setNoTransplantNorTransfusion(false);
		medicalDetailsOrderCreateDto.setOverTenWeeks(true);
		return medicalDetailsOrderCreateDto;

	}

	public static CheckoutRequestPayload mockCheckoutRequestPayloadExceptionshipping() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		// checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomershipping());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDtoException());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockCustomershipping() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		// customer.setDateOfBirth("1997-12-15");
		// customer.setEmail("no-email@junodx.com");
		// customer.setFirstName("Juno_test");
		// customer.setLastName("User");
		customer.setPhone("3334441212");
		// customer.setShippingAddress(getMockAddressshipping());
		// customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static Address getMockAddressshipping() {
		Address address = new Address();
		address.setCity("San Diego");
		address.setCountry("United States");
		address.setName("Juno Headquarters");
		address.setPostalCode("98077");
		address.setPrimaryAddress(true);
		address.setState("CA");
		address.setStreet("11511 Sorrento Valley Rd");
		address.setPrimaryMailingAddress(true);
		return address;
	}

	public static Address getMockAddress() {
		Address address = new Address();
		address.setCity("San Diego");
		address.setCountry("United States");
		address.setName("Juno Headquarters");
		address.setPostalCode("98077");
		address.setPrimaryAddress(true);
		address.setState("CA");
		address.setStreet("11511 Sorrento Valley Rd");
		address.setPrimaryMailingAddress(true);
		return address;
	}

	 public static Address createAddressFixture1() {
	        Map<String, Object> objectMap = new HashMap<String, Object>();
	        objectMap.put("name", "Undefault New Wu");
	        objectMap.put("company", "Shippo");
	        objectMap.put("street1", "Clayton St.");
	        objectMap.put("street_no", "215");
	        objectMap.put("street2", null);
	        objectMap.put("city", "San Francisco");
	        objectMap.put("state", "CA");
	        objectMap.put("zip", "94117");
	        objectMap.put("country", "US");
	        objectMap.put("phone", "+1 555 341 9393");
	        objectMap.put("email", "test@goshipppo.com");
	        objectMap.put("is_residential", false);
	        objectMap.put("metadata", "Customer ID 123456");

	        try {
	            return Address.create(objectMap);
	        } catch (ShippoException e) {
	            e.printStackTrace();
	        }
	        return null;
	    }
	public static MedicalDetailsOrderCreateDto mockMedicalDetailsOrderCreateDto() {
		MedicalDetailsOrderCreateDto medicalDetailsOrderCreateDto = new MedicalDetailsOrderCreateDto();
		medicalDetailsOrderCreateDto.setAgreedToTerms(false);
		medicalDetailsOrderCreateDto.setConsented(false);
		medicalDetailsOrderCreateDto.setLmpDate(Calendar.getInstance());
		medicalDetailsOrderCreateDto.setNoTransplantNorTransfusion(false);
		medicalDetailsOrderCreateDto.setOverTenWeeks(true);
		return medicalDetailsOrderCreateDto;

	}

	public static List<DMA> allowedDMAs = new ArrayList<>();
	public static List<State> allowedStates = new ArrayList<>();

	public static DMA mockDMA() {
		DMA dMA = new DMA();
		dMA.setCode("876689");
		return dMA;

	}

	public static State mockState() {
		State state = new State();
		state.setAbbr("abbr");
		return state;

	}

	public static List<ZipCode> allowedZipCodes = new ArrayList<>();

	public static ZipCode mockZipCode() {
		ZipCode zipCode = new ZipCode();
		zipCode.setZip("503165");
		return zipCode;

	}

	public static ZipCode mockZipCodes() {
		ZipCode zipCode = new ZipCode();
		zipCode.setZip("50434");
		return zipCode;

	}

	public static ProductAvailablity mockProductAvailablity() {
		ProductAvailablity productAvailablity = new ProductAvailablity();
		productAvailablity.setAllowedDMAs(allowedDMAs);
		productAvailablity.setAllowedDMAsAsString("876689");
		productAvailablity.setAllowedStates(allowedStates);
		productAvailablity.setAllowedStatesAsString("abbr");
		productAvailablity.setAllowedZipCodes(allowedZipCodes);
		productAvailablity.setAllowedZipCodesAsString("50434");
		productAvailablity.setAvailableInYourRegionAt(Calendar.getInstance());
		productAvailablity.setId(1L);
		productAvailablity.setMeta(DataBuilder.getMockMeta());
		productAvailablity.setNewStockAvailableAt(Calendar.getInstance());
		productAvailablity.setOutOfRegion(false);
		productAvailablity.setProduct(DataBuilderOrder.mockProduct());
		productAvailablity.setSoldOut(false);
		return productAvailablity;

	}

	public static List<CheckoutLineItem> items = new ArrayList<>();

	public static CheckoutRequestPayload mockCheckoutRequestPayloads() {
		CheckoutRequestPayload checkoutRequestPayload = new CheckoutRequestPayload();
		checkoutRequestPayload.setPaymentMethod(PaymentMethodType.card);
		checkoutRequestPayload.setClientId("12345");
		checkoutRequestPayload.setCurrency("USD");
		checkoutRequestPayload.setCustomer(mockCustomer());
		checkoutRequestPayload.setFetalSexResultsPreferences(DataBuilder.getMockFetalSexResultsPreferences());
		checkoutRequestPayload.setItems(items);
		checkoutRequestPayload.setPromoCode("gubkih");
		// checkoutRequestPayload.setProcessor(PaymentProcessingType.STRIPE);
		checkoutRequestPayload.setProvider(DataBuilder.getMockProvider());
		checkoutRequestPayload.setServiceOptions(mockServiceOptions());
		checkoutRequestPayload.setTotalAmount(399.9f);
		checkoutRequestPayload.setMedicalDetails(mockMedicalDetailsOrderCreateDto());
		return checkoutRequestPayload;

	}

	public static UserCheckout mockCustomer() {
		UserCheckout customer = new UserCheckout();
		customer.setCardConnectCustomerId("78643");
		customer.setCustomerId("1c4d2dc0-7358-459d-8f15-eefc00f53aa0");
		customer.setDateOfBirth("1997-12-15");
		customer.setEmail("no-email@junodx.com");
		customer.setFirstName("Juno_test");
		customer.setLastName("User");
		customer.setPhone("3334441212");
		customer.setShippingAddress(DataBuilder.getMockAddress());
		customer.setStripeCustomerId("");
		customer.setUseMobileForNotifications(false);
		customer.setUserType(UserType.STANDARD);
		return customer;
	}

	public static ProductAvailablity mockProductAvailablityException() {
		ProductAvailablity productAvailablity = new ProductAvailablity();
		productAvailablity.setAllowedDMAs(allowedDMAs);
		productAvailablity.setAllowedDMAsAsString("876689");
		productAvailablity.setAllowedStates(allowedStates);
		productAvailablity.setAllowedStatesAsString("abbr");
		productAvailablity.setAllowedZipCodes(allowedZipCodes);
		productAvailablity.setAllowedZipCodesAsString("503165");
		productAvailablity.setAvailableInYourRegionAt(Calendar.getInstance());
		productAvailablity.setId(1L);
		productAvailablity.setMeta(DataBuilder.getMockMeta());
		productAvailablity.setNewStockAvailableAt(Calendar.getInstance());
		productAvailablity.setOutOfRegion(true);
		productAvailablity.setProduct(DataBuilderOrder.mockProduct());
		productAvailablity.setSoldOut(false);
		return productAvailablity;

	}

	public static ProductAvailablity mockProductAvailablitySoldOut() {
		ProductAvailablity productAvailablity = new ProductAvailablity();
		productAvailablity.setAllowedDMAs(allowedDMAs);
		productAvailablity.setAllowedDMAsAsString("876689");
		productAvailablity.setAllowedStates(allowedStates);
		productAvailablity.setAllowedStatesAsString("abbr");
		productAvailablity.setAllowedZipCodes(allowedZipCodes);
		productAvailablity.setAllowedZipCodesAsString("503165");
		productAvailablity.setAvailableInYourRegionAt(Calendar.getInstance());
		productAvailablity.setId(1L);
		productAvailablity.setMeta(DataBuilder.getMockMeta());
		productAvailablity.setNewStockAvailableAt(Calendar.getInstance());
		productAvailablity.setOutOfRegion(false);
		productAvailablity.setProduct(DataBuilderOrder.mockProduct());
		productAvailablity.setSoldOut(true);
		return productAvailablity;

	}

	public static PaymentIntentDto mockPaymentIntentDto() {
		PaymentIntentDto paymentIntentDto = new PaymentIntentDto();
		paymentIntentDto.setAmount(99f);
		paymentIntentDto.setCaptureMethod("capture");
		paymentIntentDto.setClientSecret(
				"bWRuaXJhbmphbjgxNEBnbWFpbC5jb206OTM0OC04ODkyLTkzNDItMDE6Njk2MWVjZmEtODlmZi00MGRkLThlYmUtZjBkOTQ2MWE0ZmI5");
		paymentIntentDto.setCreatedAt(1L);
		paymentIntentDto.setCurrency("USD");
		paymentIntentDto.setCustomerId(mockCustomer().getId());
		paymentIntentDto.setLiveMode(false);
		paymentIntentDto.setObject("obj");

		paymentIntentDto.setPaymentMethodTypes(consents);
		paymentIntentDto.setStatus("ACTIVATED");
		return paymentIntentDto;

	}

	public static Application application = new Application();
	public static AutomaticPaymentMethodsPaymentIntent automaticPaymentMethodsPaymentIntent = new AutomaticPaymentMethodsPaymentIntent();
	public static NextAction nextAction = new NextAction();
	private static StripeResponseGetter stripeResponseGetter = new LiveStripeResponseGetter();

//	public static PaymentIntent mockPaymentIntent() {
//		PaymentIntent paymentIntent = new PaymentIntent();
//		paymentIntent.setCurrency("USD");
//		paymentIntent.setAmount(1L);
//		paymentIntent.setAmountCapturable(1L);
//		paymentIntent.setAmountReceived(1L);
//		paymentIntent.setApplication("1L");
//		paymentIntent.setApplicationFeeAmount(1L);
//		paymentIntent.setApplicationObject(application);
//		paymentIntent.setAutomaticPaymentMethods(automaticPaymentMethodsPaymentIntent);
//		paymentIntent.setCanceledAt(1L);
//		paymentIntent.setCancellationReason("1L");
//		paymentIntent.setCaptureMethod("1L");
//		paymentIntent.setClientSecret("1L");
//		paymentIntent.setConfirmationMethod("1L");
//		paymentIntent.setCreated(1L);
//
//		paymentIntent.setStripeResponseGetter(stripeResponseGetter);
//		paymentIntent.setCustomerObject(mockstripeCustomer());
//		paymentIntent.setDescription("des");
//		paymentIntent.setId("1L");
//		paymentIntent.setInvoice("1L");
//		paymentIntent.setLivemode(false);
//		paymentIntent.setNextAction(nextAction);
//		paymentIntent.setObject("1L");
//		paymentIntent.setOnBehalfOf("1L");
//		paymentIntent.setPaymentMethod("");
//		paymentIntent.setPaymentMethodOptions(null);
//		paymentIntent.setPaymentMethodTypes(consents);
//		paymentIntent.setProcessing(null);
//		return paymentIntent;
//	}

}
